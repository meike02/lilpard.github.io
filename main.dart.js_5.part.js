// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, deferred-serialization, csp), the Dart to JavaScript compiler version: 2.18.0-271.4.beta.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A = {
    _dynamicCompare(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    _defaultCompare($K) {
      if ($K._eval$1("int(0,0)")._is(B.core_Comparable_compare$closure()))
        return B.core_Comparable_compare$closure();
      return A.collection___dynamicCompare$closure();
    },
    SplayTreeMap$($K, $V) {
      var t1 = A._defaultCompare($K);
      return new A.SplayTreeMap(t1, new A.SplayTreeMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("SplayTreeMap<1,2>"));
    },
    SplayTreeSet$(compare, isValidKey, $E) {
      var t1 = isValidKey == null ? new A.SplayTreeSet_closure($E) : isValidKey;
      return new A.SplayTreeSet(compare, t1, $E._eval$1("SplayTreeSet<0>"));
    },
    IterableMixin: function IterableMixin() {
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeSetNode: function _SplayTreeSetNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _._collection$_right = _._collection$_left = null;
      _.$ti = t1;
    },
    _SplayTreeMapNode: function _SplayTreeMapNode(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _.key = t1;
      _._collection$_right = _._collection$_left = null;
      _.$ti = t2;
    },
    _SplayTree: function _SplayTree() {
    },
    SplayTreeMap: function SplayTreeMap(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeMap_closure: function SplayTreeMap_closure(t0) {
      this.K = t0;
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable(t0, t1) {
      this._collection$_tree = t0;
      this.$ti = t1;
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeMapEntryIterable: function _SplayTreeMapEntryIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._collection$_tree = t0;
      _._collection$_path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._collection$_tree = t0;
      _._collection$_path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    _SplayTreeMapEntryIterator: function _SplayTreeMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _._collection$_tree = t0;
      _._collection$_path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0) {
      this.E = t0;
    },
    SplayTreeSet__copyNode_copyChildren: function SplayTreeSet__copyNode_copyChildren(t0, t1) {
      this.$this = t0;
      this.Node = t1;
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    SelectionRegistrant: function SelectionRegistrant() {
    },
    SelectionEvent: function SelectionEvent() {
    },
    ClearSelectionEvent: function ClearSelectionEvent(t0) {
      this.type = t0;
    },
    SelectionEdgeUpdateEvent: function SelectionEdgeUpdateEvent(t0, t1) {
      this.globalPosition = t0;
      this.type = t1;
    },
    RenderViewportBase_showInViewport(curve, descendant, duration, offset, rect, viewport) {
      var leadingEdgeOffset, trailingEdgeOffset, t1, t2, t3, targetOffset, transform;
      if (descendant == null)
        return rect;
      leadingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 0, rect);
      trailingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 1, rect);
      t1 = offset._pixels;
      t1.toString;
      t2 = leadingEdgeOffset.offset;
      t3 = trailingEdgeOffset.offset;
      if (t2 < t3)
        targetOffset = Math.abs(t1 - t2) < Math.abs(t1 - t3) ? leadingEdgeOffset : trailingEdgeOffset;
      else if (t1 > t2)
        targetOffset = leadingEdgeOffset;
      else {
        if (!(t1 < t3)) {
          t1 = viewport._node$_parent;
          t1.toString;
          transform = descendant.getTransformTo$1(0, type$.RenderObject._as(t1));
          return B.MatrixUtils_transformRect(transform, rect == null ? descendant.get$paintBounds() : rect);
        }
        targetOffset = trailingEdgeOffset;
      }
      offset.moveTo$3$curve$duration(0, targetOffset.offset, curve, duration);
      return targetOffset.rect;
    },
    RevealedOffset: function RevealedOffset(t0, t1) {
      this.offset = t0;
      this.rect = t1;
    },
    ViewportElementMixin: function ViewportElementMixin() {
    },
    ScrollViewKeyboardDismissBehavior: function ScrollViewKeyboardDismissBehavior(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    Scrollable$(axisDirection, clipBehavior, controller, dragStartBehavior, excludeFromSemantics, physics, restorationId, scrollBehavior, semanticChildCount, viewportBuilder) {
      return new A.Scrollable(axisDirection, controller, physics, viewportBuilder, excludeFromSemantics, semanticChildCount, dragStartBehavior, restorationId, scrollBehavior, clipBehavior, null);
    },
    _getDeltaToScrollOrigin(scrollableState) {
      var t1;
      switch (scrollableState._widget.axisDirection.index) {
        case 2:
          t1 = scrollableState._scrollable$_position._pixels;
          t1.toString;
          return new B.Offset(0, t1);
        case 0:
          t1 = scrollableState._scrollable$_position._pixels;
          t1.toString;
          return new B.Offset(0, -t1);
        case 3:
          t1 = scrollableState._scrollable$_position._pixels;
          t1.toString;
          return new B.Offset(-t1, 0);
        case 1:
          t1 = scrollableState._scrollable$_position._pixels;
          t1.toString;
          return new B.Offset(t1, 0);
      }
    },
    _ScrollableState_State_TickerProviderStateMixin_RestorationMixin_dispose_closure: function _ScrollableState_State_TickerProviderStateMixin_RestorationMixin_dispose_closure() {
    },
    Scrollable: function Scrollable(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.axisDirection = t0;
      _.controller = t1;
      _.physics = t2;
      _.viewportBuilder = t3;
      _.excludeFromSemantics = t4;
      _.semanticChildCount = t5;
      _.dragStartBehavior = t6;
      _.restorationId = t7;
      _.scrollBehavior = t8;
      _.clipBehavior = t9;
      _.key = t10;
    },
    _ScrollableScope: function _ScrollableScope(t0, t1, t2, t3) {
      var _ = this;
      _.scrollable = t0;
      _.position = t1;
      _.child = t2;
      _.key = t3;
    },
    ScrollableState: function ScrollableState(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._scrollable$_position = null;
      _._persistedScrollOffset = t0;
      _.__ScrollableState__configuration_A = $;
      _._mediaQueryData = _._fallbackScrollController = _._physics = null;
      _._scrollSemanticsKey = t1;
      _._gestureDetectorKey = t2;
      _._ignorePointerKey = t3;
      _._gestureRecognizers = t4;
      _._shouldIgnorePointer = false;
      _._hold = _._scrollable$_drag = _._scrollable$_lastAxisDirection = _._lastCanDrag = null;
      _.RestorationMixin__bucket = t5;
      _.RestorationMixin__properties = t6;
      _.RestorationMixin__debugPropertiesWaitingForReregistration = t7;
      _.RestorationMixin__firstRestorePending = t8;
      _.RestorationMixin__currentParent = t9;
      _.TickerProviderStateMixin__tickers = t10;
      _.TickerProviderStateMixin__tickerModeNotifier = t11;
      _._widget = null;
      _._debugLifecycleState = t12;
      _._framework$_element = null;
    },
    ScrollableState_setCanDrag_closure: function ScrollableState_setCanDrag_closure(t0) {
      this.$this = t0;
    },
    ScrollableState_setCanDrag_closure0: function ScrollableState_setCanDrag_closure0(t0) {
      this.$this = t0;
    },
    ScrollableState_setCanDrag_closure1: function ScrollableState_setCanDrag_closure1(t0) {
      this.$this = t0;
    },
    ScrollableState_setCanDrag_closure2: function ScrollableState_setCanDrag_closure2(t0) {
      this.$this = t0;
    },
    _ScrollableSelectionHandler: function _ScrollableSelectionHandler(t0, t1, t2, t3, t4) {
      var _ = this;
      _.state = t0;
      _.position = t1;
      _.child = t2;
      _.registrar = t3;
      _.key = t4;
    },
    _ScrollableSelectionHandlerState: function _ScrollableSelectionHandlerState(t0) {
      var _ = this;
      _.___ScrollableSelectionHandlerState__selectionDelegate_A = $;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._framework$_element = null;
    },
    EdgeDraggingAutoScroller: function EdgeDraggingAutoScroller(t0, t1) {
      var _ = this;
      _.scrollable = t0;
      _.velocityScalar = t1;
      _.__EdgeDraggingAutoScroller__dragTargetRelatedToScrollOrigin_A = $;
      _._scrolling = false;
    },
    _ScrollableSelectionContainerDelegate: function _ScrollableSelectionContainerDelegate(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.state = t0;
      _._autoScroller = t1;
      _._scheduledLayoutChange = false;
      _._currentDragEndRelatedToOrigin = _._currentDragStartRelatedToOrigin = null;
      _._selectionStartsInScrollable = false;
      _._scrollable$_position = t2;
      _._selectableStartEdgeUpdateRecords = t3;
      _._selectableEndEdgeUpdateRecords = t4;
      _.selectables = t5;
      _.currentSelectionStartIndex = _.currentSelectionEndIndex = -1;
      _._endHandleLayerOwner = _._endHandleLayer = _._startHandleLayerOwner = _._startHandleLayer = null;
      _._selectionInProgress = _._scheduledSelectableUpdate = _._isHandlingSelectionEvent = false;
      _._additions = t6;
      _._selectionGeometry = t7;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t8;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
      _._selectionContainerContext = null;
    },
    _ScrollableSelectionContainerDelegate__scheduleLayoutChange_closure: function _ScrollableSelectionContainerDelegate__scheduleLayoutChange_closure(t0) {
      this.$this = t0;
    },
    _ScrollableSelectionContainerDelegate_didChangeSelectables_closure: function _ScrollableSelectionContainerDelegate_didChangeSelectables_closure(t0) {
      this.selectableSet = t0;
    },
    _ScrollableSelectionContainerDelegate_didChangeSelectables_closure0: function _ScrollableSelectionContainerDelegate_didChangeSelectables_closure0(t0) {
      this.selectableSet = t0;
    },
    ScrollableDetails: function ScrollableDetails(t0, t1, t2) {
      this.direction = t0;
      this.controller = t1;
      this.clipBehavior = t2;
    },
    _ScrollSemantics: function _ScrollSemantics(t0, t1, t2, t3, t4) {
      var _ = this;
      _.position = t0;
      _.allowImplicitScrolling = t1;
      _.semanticChildCount = t2;
      _.child = t3;
      _.key = t4;
    },
    _RenderScrollSemantics: function _RenderScrollSemantics(t0, t1, t2, t3, t4) {
      var _ = this;
      _._scrollable$_position = t0;
      _._allowImplicitScrolling = t1;
      _._semanticChildCount = t2;
      _._innerNode = null;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RestorableScrollOffset: function _RestorableScrollOffset(t0) {
      var _ = this;
      _._restoration_properties$_value = null;
      _._restoration0$_disposed = false;
      _._restoration0$_owner = _._restoration0$_restorationId = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    _ScrollableState_State_TickerProviderStateMixin: function _ScrollableState_State_TickerProviderStateMixin() {
    },
    _ScrollableState_State_TickerProviderStateMixin_RestorationMixin: function _ScrollableState_State_TickerProviderStateMixin_RestorationMixin() {
    },
    MultiSelectableSelectionContainerDelegate__compareVertically(a, b) {
      var t4,
        t1 = a.top,
        t2 = b.top,
        t3 = t1 - t2;
      if (!(t3 < 1e-10 && a.bottom - b.bottom > -1e-10))
        t4 = t2 - t1 < 1e-10 && b.bottom - a.bottom > -1e-10;
      else
        t4 = true;
      if (t4)
        return 0;
      if (Math.abs(t3) > 1e-10)
        return t1 > t2 ? 1 : -1;
      return a.bottom > b.bottom ? 1 : -1;
    },
    MultiSelectableSelectionContainerDelegate__compareHorizontally(a, b) {
      var t1 = a.left,
        t2 = b.left,
        t3 = t1 - t2;
      if (t3 < 1e-10 && a.right - b.right > -1e-10)
        return -1;
      if (t2 - t1 < 1e-10 && b.right - a.right > -1e-10)
        return 1;
      if (Math.abs(t3) > 1e-10)
        return t1 > t2 ? 1 : -1;
      return a.right > b.right ? 1 : -1;
    },
    MultiSelectableSelectionContainerDelegate: function MultiSelectableSelectionContainerDelegate() {
    },
    MultiSelectableSelectionContainerDelegate__scheduleSelectableUpdate_closure: function MultiSelectableSelectionContainerDelegate__scheduleSelectableUpdate_closure(t0) {
      this.$this = t0;
    },
    MultiSelectableSelectionContainerDelegate_handleSelectWord_closure: function MultiSelectableSelectionContainerDelegate_handleSelectWord_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    MultiSelectableSelectionContainerDelegate_handleSelectWord_closure0: function MultiSelectableSelectionContainerDelegate_handleSelectWord_closure0(t0) {
      this.$this = t0;
    },
    _MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier: function _MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier() {
    },
    SelectionRegistrarScope$(child, registrar) {
      return new A.SelectionRegistrarScope(registrar, child, null);
    },
    SelectionContainer: function SelectionContainer(t0, t1, t2, t3) {
      var _ = this;
      _.registrar = t0;
      _.child = t1;
      _.delegate = t2;
      _.key = t3;
    },
    _SelectionContainerState: function _SelectionContainerState(t0, t1, t2, t3) {
      var _ = this;
      _._selection_container$_listeners = t0;
      _.SelectionRegistrant__registrar = t1;
      _.SelectionRegistrant__subscribedToSelectionRegistrar = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    SelectionRegistrarScope: function SelectionRegistrarScope(t0, t1, t2) {
      this.registrar = t0;
      this.child = t1;
      this.key = t2;
    },
    SelectionContainerDelegate: function SelectionContainerDelegate() {
    },
    __SelectionContainerState_State_Selectable: function __SelectionContainerState_State_Selectable() {
    },
    __SelectionContainerState_State_Selectable_SelectionRegistrant: function __SelectionContainerState_State_Selectable_SelectionRegistrant() {
    },
    SingleChildScrollView$(child, padding, physics, scrollDirection) {
      return new A.SingleChildScrollView(scrollDirection, padding, physics, child, null);
    },
    SingleChildScrollView: function SingleChildScrollView(t0, t1, t2, t3, t4) {
      var _ = this;
      _.scrollDirection = t0;
      _.padding = t1;
      _.physics = t2;
      _.child = t3;
      _.key = t4;
    },
    SingleChildScrollView_build_closure: function SingleChildScrollView_build_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.axisDirection = t2;
    },
    _SingleChildViewport: function _SingleChildViewport(t0, t1, t2, t3, t4) {
      var _ = this;
      _.axisDirection = t0;
      _.offset = t1;
      _.clipBehavior = t2;
      _.child = t3;
      _.key = t4;
    },
    _SingleChildViewportElement: function _SingleChildViewportElement(t0, t1) {
      var _ = this;
      _._slot = _._notificationTree = _._debugReassembleConfig = _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = _._framework$_child = null;
      _.__Element__depth_A = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    _RenderSingleChildViewport: function _RenderSingleChildViewport(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._axisDirection = t0;
      _._single_child_scroll_view$_offset = t1;
      _._single_child_scroll_view$_clipBehavior = t2;
      _._single_child_scroll_view$_clipRectLayer = t3;
      _.RenderObjectWithChildMixin__child = t4;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t5;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderSingleChildViewport_paint_paintContents: function _RenderSingleChildViewport_paint_paintContents(t0, t1) {
      this.$this = t0;
      this.paintOffset = t1;
    },
    _RenderSingleChildViewport_hitTestChildren_closure: function _RenderSingleChildViewport_hitTestChildren_closure(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    __RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin: function __RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin() {
    },
    __SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin: function __SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin() {
    },
    __SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin: function __SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin() {
    },
    textDirectionToAxisDirection(textDirection) {
      switch (textDirection.index) {
        case 0:
          return C.AxisDirection_3;
        case 1:
          return C.AxisDirection_1;
      }
    },
    getAxisDirectionFromAxisReverseAndDirectionality(context, axis, reverse) {
      var t1, axisDirection;
      switch (axis.index) {
        case 0:
          t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
          t1.toString;
          axisDirection = A.textDirectionToAxisDirection(t1.textDirection);
          return axisDirection;
        case 1:
          return C.AxisDirection_2;
      }
    },
    PrimaryScrollController$none(child) {
      return new B.PrimaryScrollController(null, null, D.Set_empty, child, null);
    },
    PrimaryScrollController_shouldInherit(context, scrollDirection) {
      var platform,
        result = context.findAncestorWidgetOfExactType$1$0(type$.PrimaryScrollController);
      if (result == null)
        return false;
      platform = B.ScrollConfiguration_of(context).getPlatform$1(context);
      if (J.containsKey$1$x(result.automaticallyInheritForPlatforms._collection$_map, platform))
        return result.scrollDirection === scrollDirection;
      return false;
    }
  },
  B, J, C, D;
  A = hunkHelpers.updateHolder(holdersList[23], A);
  B = holdersList[0];
  J = holdersList[1];
  C = holdersList[2];
  D = holdersList[34];
  A.IterableMixin.prototype = {
    map$1$1(_, toElement, $T) {
      return B.MappedIterable_MappedIterable(this, toElement, this.$ti._precomputed1, $T);
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.$ti, t1 = new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      for (t1 = this.$ti, t1 = new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t1.moveNext$0();)
        action.call$1(t1.get$current(t1));
    },
    toList$1$growable(_, growable) {
      return B.List_List$from(this, true, this.$ti._precomputed1);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      return B.LinkedHashSet_LinkedHashSet$from(this, this.$ti._precomputed1);
    },
    get$length(_) {
      var count,
        t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      var t1 = this.$ti;
      return !new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")).moveNext$0();
    },
    get$isNotEmpty(_) {
      return this._root != null;
    },
    take$1(_, count) {
      return B.TakeIterable_TakeIterable(this, count, this.$ti._precomputed1);
    },
    skip$1(_, count) {
      return B.SkipIterable_SkipIterable(this, count, this.$ti._precomputed1);
    },
    get$first(_) {
      var t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      if (!it.moveNext$0())
        throw B.wrapException(B.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last(_) {
      var result,
        t1 = this.$ti,
        it = new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
      if (!it.moveNext$0())
        throw B.wrapException(B.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _this = this, _s5_ = "index";
      B.checkNotNullable(index, _s5_, type$.int);
      B.RangeError_checkNotNegative(index, _s5_);
      for (t1 = _this.$ti, t1 = new A._SplayTreeKeyIterator(_this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), _this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw B.wrapException(B.IndexError$(index, _this, _s5_, null, elementIndex));
    },
    toString$0(_) {
      return B.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A._SplayTreeNode.prototype = {
    get$key(receiver) {
      return this.key;
    }
  };
  A._SplayTreeSetNode.prototype = {};
  A._SplayTreeMapNode.prototype = {
    _replaceValue$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1 = new A._SplayTreeMapNode(value, _this.key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>"));
      t1._collection$_left = _this._collection$_left;
      t1._collection$_right = _this._collection$_right;
      return t1;
    },
    toString$0(_) {
      return "MapEntry(" + B.S(this.key) + ": " + B.S(this.value) + ")";
    },
    $isMapEntry: 1,
    get$value(receiver) {
      return this.value;
    }
  };
  A._SplayTree.prototype = {
    _splay$1(key) {
      var compare, comp, current, newTreeLeft, left, newTreeRight, right, currentLeft, currentLeft0, currentRight, currentRight0, _this = this, _null = null,
        root = _this.get$_root();
      if (root == null) {
        _this._compare$2(key, key);
        return -1;
      }
      compare = _this.get$_compare();
      for (comp = _null, current = root, newTreeLeft = comp, left = newTreeLeft, newTreeRight = left, right = newTreeRight; true;) {
        comp = compare.call$2(current.key, key);
        if (comp > 0) {
          currentLeft = current._collection$_left;
          if (currentLeft == null)
            break;
          comp = compare.call$2(currentLeft.key, key);
          if (comp > 0) {
            current._collection$_left = currentLeft._collection$_right;
            currentLeft._collection$_right = current;
            currentLeft0 = currentLeft._collection$_left;
            if (currentLeft0 == null) {
              current = currentLeft;
              break;
            }
            current = currentLeft;
            currentLeft = currentLeft0;
          }
          if (right == null)
            newTreeRight = current;
          else
            right._collection$_left = current;
          right = current;
          current = currentLeft;
        } else {
          if (comp < 0) {
            currentRight = current._collection$_right;
            if (currentRight == null)
              break;
            comp = compare.call$2(currentRight.key, key);
            if (comp < 0) {
              current._collection$_right = currentRight._collection$_left;
              currentRight._collection$_left = current;
              currentRight0 = currentRight._collection$_right;
              if (currentRight0 == null) {
                current = currentRight;
                break;
              }
              current = currentRight;
              currentRight = currentRight0;
            }
            if (left == null)
              newTreeLeft = current;
            else
              left._collection$_right = current;
          } else
            break;
          left = current;
          current = currentRight;
        }
      }
      if (left != null) {
        left._collection$_right = current._collection$_left;
        current._collection$_left = newTreeLeft;
      }
      if (right != null) {
        right._collection$_left = current._collection$_right;
        current._collection$_right = newTreeRight;
      }
      if (_this.get$_root() !== current) {
        _this.set$_root(current);
        ++_this._splayCount;
      }
      return comp;
    },
    _splayMin$1(node) {
      var current, nextLeft0,
        nextLeft = node._collection$_left;
      for (current = node; nextLeft != null; current = nextLeft, nextLeft = nextLeft0) {
        current._collection$_left = nextLeft._collection$_right;
        nextLeft._collection$_right = current;
        nextLeft0 = nextLeft._collection$_left;
      }
      return current;
    },
    _splayMax$1(node) {
      var current, nextRight0,
        nextRight = node._collection$_right;
      for (current = node; nextRight != null; current = nextRight, nextRight = nextRight0) {
        current._collection$_right = nextRight._collection$_left;
        nextRight._collection$_left = current;
        nextRight0 = nextRight._collection$_right;
      }
      return current;
    },
    _remove$1(_, key) {
      var root, left, t1, root0, _this = this;
      if (_this.get$_root() == null)
        return null;
      if (_this._splay$1(key) !== 0)
        return null;
      root = _this.get$_root();
      left = root._collection$_left;
      --_this._count;
      t1 = root._collection$_right;
      if (left == null)
        _this.set$_root(t1);
      else {
        root0 = _this._splayMax$1(left);
        root0._collection$_right = t1;
        _this.set$_root(root0);
      }
      ++_this._modificationCount;
      return root;
    },
    _addNewRoot$2(node, comp) {
      var root, _this = this;
      ++_this._count;
      ++_this._modificationCount;
      root = _this.get$_root();
      if (root == null) {
        _this.set$_root(node);
        return;
      }
      if (comp < 0) {
        node._collection$_left = root;
        node._collection$_right = root._collection$_right;
        root._collection$_right = null;
      } else {
        node._collection$_right = root;
        node._collection$_left = root._collection$_left;
        root._collection$_left = null;
      }
      _this.set$_root(node);
    },
    get$_collection$_first() {
      var _this = this,
        root = _this.get$_root();
      if (root == null)
        return null;
      _this.set$_root(_this._splayMin$1(root));
      return _this.get$_root();
    },
    get$_collection$_last() {
      var _this = this,
        root = _this.get$_root();
      if (root == null)
        return null;
      _this.set$_root(_this._splayMax$1(root));
      return _this.get$_root();
    },
    _containsKey$1(key) {
      return this._validKey$1(key) && this._splay$1(key) === 0;
    },
    _compare$2(arg0, arg1) {
      return this.get$_compare().call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this.get$_validKey().call$1(arg0);
    }
  };
  A.SplayTreeMap.prototype = {
    $index(_, key) {
      var _this = this;
      if (!_this._validKey.call$1(key))
        return null;
      if (_this._root != null)
        if (_this._splay$1(key) === 0)
          return _this._root.value;
      return null;
    },
    remove$1(_, key) {
      var mapRoot;
      if (!this._validKey.call$1(key))
        return null;
      mapRoot = this._remove$1(0, key);
      if (mapRoot != null)
        return mapRoot.value;
      return null;
    },
    $indexSet(_, key, value) {
      var t1, _this = this,
        comp = _this._splay$1(key);
      if (comp === 0) {
        _this._root = _this._root._replaceValue$1(value);
        ++_this._splayCount;
        return;
      }
      t1 = _this.$ti;
      _this._addNewRoot$2(new A._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>")), comp);
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var modificationCount, splayCount, value, t1, _this = this,
        comp = _this._splay$1(key);
      if (comp === 0)
        return _this._root.value;
      modificationCount = _this._modificationCount;
      splayCount = _this._splayCount;
      value = ifAbsent.call$0();
      if (modificationCount !== _this._modificationCount)
        throw B.wrapException(B.ConcurrentModificationError$(_this));
      if (splayCount !== _this._splayCount)
        comp = _this._splay$1(key);
      t1 = _this.$ti;
      _this._addNewRoot$2(new A._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapNode<1,2>")), comp);
      return value;
    },
    get$isEmpty(_) {
      return this._root == null;
    },
    get$isNotEmpty(_) {
      return this._root != null;
    },
    forEach$1(_, f) {
      var nodes, node,
        t1 = this.$ti;
      t1 = t1._eval$1("@<1>")._bind$1(t1._rest[1]);
      nodes = new A._SplayTreeMapEntryIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), this._splayCount, t1._eval$1("_SplayTreeMapEntryIterator<1,2>"));
      for (; nodes.moveNext$0();) {
        node = nodes.get$current(nodes);
        f.call$2(node.get$key(node), node.get$value(node));
      }
    },
    get$length(_) {
      return this._count;
    },
    containsKey$1(_, key) {
      return this._containsKey$1(key);
    },
    get$keys(_) {
      var t1 = this.$ti;
      return new A._SplayTreeKeyIterable(this, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeMapNode<1,2>"))._eval$1("_SplayTreeKeyIterable<1,2>"));
    },
    get$values(_) {
      var t1 = this.$ti;
      return new A._SplayTreeValueIterable(this, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeValueIterable<1,2>"));
    },
    get$entries(_) {
      var t1 = this.$ti;
      return new A._SplayTreeMapEntryIterable(this, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("_SplayTreeMapEntryIterable<1,2>"));
    },
    firstKey$0() {
      if (this._root == null)
        return null;
      return this.get$_collection$_first().key;
    },
    lastKey$0() {
      if (this._root == null)
        return null;
      return this.get$_collection$_last().key;
    },
    lastKeyBefore$1(key) {
      var node, nodeRight, nodeRight0, _this = this;
      if (_this._root == null)
        return null;
      if (_this._splay$1(key) < 0)
        return _this._root.key;
      node = _this._root._collection$_left;
      if (node == null)
        return null;
      nodeRight = node._collection$_right;
      for (; nodeRight != null; node = nodeRight, nodeRight = nodeRight0)
        nodeRight0 = nodeRight._collection$_right;
      return node.key;
    },
    firstKeyAfter$1(key) {
      var node, nodeLeft, nodeLeft0, _this = this;
      if (_this._root == null)
        return null;
      if (_this._splay$1(key) > 0)
        return _this._root.key;
      node = _this._root._collection$_right;
      if (node == null)
        return null;
      nodeLeft = node._collection$_left;
      for (; nodeLeft != null; node = nodeLeft, nodeLeft = nodeLeft0)
        nodeLeft0 = nodeLeft._collection$_left;
      return node.key;
    },
    $isMap: 1,
    _compare$2(arg0, arg1) {
      return this._compare.call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this._validKey.call$1(arg0);
    },
    get$_root() {
      return this._root;
    },
    get$_compare() {
      return this._compare;
    },
    set$_root(val) {
      return this._root = val;
    }
  };
  A._SplayTreeIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_path;
      if (t1.length === 0) {
        B._instanceType(this)._eval$1("_SplayTreeIterator.T")._as(null);
        return null;
      }
      return this._getValue$1(C.JSArray_methods.get$last(t1));
    },
    moveNext$0() {
      var node, next, _this = this,
        t1 = _this._modificationCount,
        t2 = _this._collection$_tree,
        t3 = t2._modificationCount;
      if (t1 !== t3) {
        if (t1 == null) {
          _this._modificationCount = t3;
          node = t2.get$_root();
          for (t1 = _this._collection$_path; node != null;) {
            t1.push(node);
            node = node._collection$_left;
          }
          return t1.length !== 0;
        }
        throw B.wrapException(B.ConcurrentModificationError$(t2));
      }
      t1 = _this._collection$_path;
      if (t1.length === 0)
        return false;
      if (_this._splayCount !== t2._splayCount) {
        t3 = C.JSArray_methods.get$last(t1);
        C.JSArray_methods.clear$0(t1);
        t2._splay$1(t3.key);
        t3 = t2.get$_root();
        t3.toString;
        t1.push(t3);
        _this._splayCount = t2._splayCount;
      }
      node = C.JSArray_methods.get$last(t1);
      next = node._collection$_right;
      if (next != null) {
        for (; next != null;) {
          t1.push(next);
          next = next._collection$_left;
        }
        return true;
      }
      t1.pop();
      while (true) {
        if (!(t1.length !== 0 && C.JSArray_methods.get$last(t1)._collection$_right === node))
          break;
        node = t1.pop();
      }
      return t1.length !== 0;
    }
  };
  A._SplayTreeKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_tree._count;
    },
    get$isEmpty(_) {
      return this._collection$_tree._count === 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_tree,
        t2 = this.$ti;
      return new A._SplayTreeKeyIterator(t1, B._setArrayType([], t2._eval$1("JSArray<2>")), t1._splayCount, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeKeyIterator<1,2>"));
    },
    contains$1(_, o) {
      return this._collection$_tree._containsKey$1(o);
    },
    toSet$0(_) {
      var t1 = this._collection$_tree,
        t2 = this.$ti,
        set = A.SplayTreeSet$(t1._compare, t1._validKey, t2._precomputed1);
      set._count = t1._count;
      set._root = set._copyNode$1$1(t1._root, t2._rest[1]);
      return set;
    }
  };
  A._SplayTreeValueIterable.prototype = {
    get$length(_) {
      return this._collection$_map._count;
    },
    get$isEmpty(_) {
      return this._collection$_map._count === 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = this.$ti;
      t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]);
      return new A._SplayTreeValueIterator(t1, B._setArrayType([], t2._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), t1._splayCount, t2._eval$1("_SplayTreeValueIterator<1,2>"));
    }
  };
  A._SplayTreeMapEntryIterable.prototype = {
    get$length(_) {
      return this._collection$_map._count;
    },
    get$isEmpty(_) {
      return this._collection$_map._count === 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = this.$ti;
      t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]);
      return new A._SplayTreeMapEntryIterator(t1, B._setArrayType([], t2._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), t1._splayCount, t2._eval$1("_SplayTreeMapEntryIterator<1,2>"));
    }
  };
  A._SplayTreeKeyIterator.prototype = {
    _getValue$1(node) {
      return node.key;
    }
  };
  A._SplayTreeValueIterator.prototype = {
    _getValue$1(node) {
      return node.value;
    }
  };
  A._SplayTreeMapEntryIterator.prototype = {
    _getValue$1(node) {
      return node;
    }
  };
  A.SplayTreeSet.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A._SplayTreeKeyIterator(this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>"));
    },
    get$length(_) {
      return this._count;
    },
    get$isEmpty(_) {
      return this._root == null;
    },
    get$isNotEmpty(_) {
      return this._root != null;
    },
    get$first(_) {
      if (this._count === 0)
        throw B.wrapException(B.IterableElementError_noElement());
      return this.get$_collection$_first().key;
    },
    get$last(_) {
      if (this._count === 0)
        throw B.wrapException(B.IterableElementError_noElement());
      return this.get$_collection$_last().key;
    },
    contains$1(_, element) {
      return this._validKey.call$1(element) && this._splay$1(this.$ti._precomputed1._as(element)) === 0;
    },
    add$1(_, element) {
      return this._add$1(0, element);
    },
    _add$1(_, element) {
      var compare = this._splay$1(element);
      if (compare === 0)
        return false;
      this._addNewRoot$2(new A._SplayTreeSetNode(element, this.$ti._eval$1("_SplayTreeSetNode<1>")), compare);
      return true;
    },
    remove$1(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this._remove$1(0, this.$ti._precomputed1._as(object)) != null;
    },
    intersection$1(_, other) {
      var element, _this = this,
        t1 = _this.$ti,
        result = A.SplayTreeSet$(_this._compare, _this._validKey, t1._precomputed1);
      for (t1 = new A._SplayTreeKeyIterator(_this, B._setArrayType([], t1._eval$1("JSArray<_SplayTreeSetNode<1>>")), _this._splayCount, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeSetNode<1>"))._eval$1("_SplayTreeKeyIterator<1,2>")); t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (other.contains$1(0, element))
          result._add$1(0, element);
      }
      return result;
    },
    _copyNode$1$1(node, $Node) {
      var result;
      if (node == null)
        return null;
      result = new A._SplayTreeSetNode(node.key, this.$ti._eval$1("_SplayTreeSetNode<1>"));
      new A.SplayTreeSet__copyNode_copyChildren(this, $Node).call$2(node, result);
      return result;
    },
    toSet$0(_) {
      var _this = this,
        t1 = _this.$ti,
        set = A.SplayTreeSet$(_this._compare, _this._validKey, t1._precomputed1);
      set._count = _this._count;
      set._root = _this._copyNode$1$1(_this._root, t1._eval$1("_SplayTreeSetNode<1>"));
      return set;
    },
    toString$0(_) {
      return B.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1,
    _compare$2(arg0, arg1) {
      return this._compare.call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this._validKey.call$1(arg0);
    },
    get$_root() {
      return this._root;
    },
    get$_compare() {
      return this._compare;
    },
    set$_root(val) {
      return this._root = val;
    }
  };
  A._SplayTreeMap__SplayTree_MapMixin.prototype = {};
  A._SplayTreeSet__SplayTree_IterableMixin.prototype = {};
  A._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {};
  A.SelectionRegistrant.prototype = {
    set$registrar(value) {
      var _this = this,
        t1 = _this.SelectionRegistrant__registrar;
      if (value == t1)
        return;
      if (value == null)
        _this.removeListener$1(0, _this.get$_selection$_updateSelectionRegistrarSubscription());
      else if (t1 == null)
        _this.addListener$1(0, _this.get$_selection$_updateSelectionRegistrarSubscription());
      _this._selection$_removeSelectionRegistrarSubscription$0();
      _this.SelectionRegistrant__registrar = value;
      _this._selection$_updateSelectionRegistrarSubscription$0();
    },
    _selection$_updateSelectionRegistrarSubscription$0() {
      var _this = this;
      if (_this.SelectionRegistrant__registrar == null) {
        _this.SelectionRegistrant__subscribedToSelectionRegistrar = false;
        return;
      }
      if (_this.SelectionRegistrant__subscribedToSelectionRegistrar && !_this.get$value(_this).hasContent) {
        _this.SelectionRegistrant__registrar.remove$1(0, _this);
        _this.SelectionRegistrant__subscribedToSelectionRegistrar = false;
      } else if (!_this.SelectionRegistrant__subscribedToSelectionRegistrar && _this.get$value(_this).hasContent) {
        _this.SelectionRegistrant__registrar.add$1(0, _this);
        _this.SelectionRegistrant__subscribedToSelectionRegistrar = true;
      }
    },
    _selection$_removeSelectionRegistrarSubscription$0() {
      var _this = this;
      if (_this.SelectionRegistrant__subscribedToSelectionRegistrar) {
        _this.SelectionRegistrant__registrar.remove$1(0, _this);
        _this.SelectionRegistrant__subscribedToSelectionRegistrar = false;
      }
    }
  };
  A.SelectionEvent.prototype = {};
  A.ClearSelectionEvent.prototype = {};
  A.SelectionEdgeUpdateEvent.prototype = {};
  A.RevealedOffset.prototype = {
    toString$0(_) {
      return "RevealedOffset(offset: " + B.S(this.offset) + ", rect: " + this.rect.toString$0(0) + ")";
    }
  };
  A.ViewportElementMixin.prototype = {
    onNotification$1(notification) {
      if (type$.ViewportNotificationMixin._is(notification))
        ++notification.ViewportNotificationMixin__depth;
      return false;
    }
  };
  A.ScrollViewKeyboardDismissBehavior.prototype = {
    toString$0(_) {
      return "ScrollViewKeyboardDismissBehavior." + this._core$_name;
    }
  };
  A.Scrollable.prototype = {
    createState$0() {
      var _null = null,
        t1 = type$.LabeledGlobalKey_State_StatefulWidget;
      return new A.ScrollableState(new A._RestorableScrollOffset($.$get$ChangeNotifier__emptyListeners()), new B.LabeledGlobalKey(_null, t1), new B.LabeledGlobalKey(_null, type$.LabeledGlobalKey_RawGestureDetectorState), new B.LabeledGlobalKey(_null, t1), C.Map_empty4, _null, B.LinkedHashMap_LinkedHashMap$_empty(type$.RestorableProperty_nullable_Object, type$.void_Function), _null, true, _null, _null, _null, C._StateLifecycle_0);
    },
    viewportBuilder$2(arg0, arg1) {
      return this.viewportBuilder.call$2(arg0, arg1);
    }
  };
  A._ScrollableScope.prototype = {
    updateShouldNotify$1(old) {
      return this.position !== old.position;
    }
  };
  A.ScrollableState.prototype = {
    get$position(_) {
      var t1 = this._scrollable$_position;
      t1.toString;
      return t1;
    },
    get$axisDirection() {
      return this._widget.axisDirection;
    },
    get$_effectiveScrollController() {
      var t1 = this._widget.controller;
      if (t1 == null) {
        t1 = this._fallbackScrollController;
        t1.toString;
      }
      return t1;
    },
    _updatePosition$0() {
      var t2, t3, oldPosition, _this = this,
        t1 = _this._widget.scrollBehavior;
      if (t1 == null) {
        t1 = _this._framework$_element;
        t1.toString;
        t1 = B.ScrollConfiguration_of(t1);
      }
      _this.__ScrollableState__configuration_A = t1;
      t2 = _this._framework$_element;
      t2.toString;
      t2 = t1.getScrollPhysics$1(t2);
      _this._physics = t2;
      t1 = _this._widget;
      t3 = t1.physics;
      if (t3 != null)
        _this._physics = t3.applyTo$1(t2);
      else {
        t1 = t1.scrollBehavior;
        if (t1 != null) {
          t2 = _this._framework$_element;
          t2.toString;
          _this._physics = t1.getScrollPhysics$1(t2).applyTo$1(_this._physics);
        }
      }
      oldPosition = _this._scrollable$_position;
      if (oldPosition != null) {
        _this.get$_effectiveScrollController().detach$1(0, oldPosition);
        B.scheduleMicrotask(oldPosition.get$dispose());
      }
      t1 = _this.get$_effectiveScrollController();
      t2 = _this._physics;
      t2.toString;
      _this._scrollable$_position = t1.createScrollPosition$3(t2, _this, oldPosition);
      t2 = _this.get$_effectiveScrollController();
      t1 = _this._scrollable$_position;
      t1.toString;
      t2.attach$1(t1);
    },
    restoreState$2(oldBucket, initialRestore) {
      var t2, t3, t4,
        t1 = this._persistedScrollOffset;
      this.registerForRestoration$2(t1, "offset");
      t2 = t1._restoration_properties$_value;
      t3 = t2 == null;
      if ((t3 ? B._instanceType(t1)._eval$1("RestorableValue.T")._as(t2) : t2) != null) {
        t4 = this._scrollable$_position;
        t4.toString;
        t1 = t3 ? B._instanceType(t1)._eval$1("RestorableValue.T")._as(t2) : t2;
        t1.toString;
        t4.restoreOffset$2$initialRestore(t1, initialRestore);
      }
    },
    saveOffset$1(offset) {
      var t1;
      this._persistedScrollOffset.set$value(0, offset);
      t1 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__restorationManager_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.flushData$0();
    },
    initState$0() {
      if (this._widget.controller == null)
        this._fallbackScrollController = B.ScrollController$();
      this.super$State$initState();
    },
    didChangeDependencies$0() {
      var _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      _this._mediaQueryData = B.MediaQuery_maybeOf(t1);
      _this._updatePosition$0();
      _this.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$didChangeDependencies();
    },
    _shouldUpdatePosition$1(oldWidget) {
      var t2, oldPhysics, t3, _this = this, _null = null,
        t1 = _this._widget,
        newPhysics = t1.physics;
      if (newPhysics == null) {
        t1 = t1.scrollBehavior;
        if (t1 == null)
          newPhysics = _null;
        else {
          t2 = _this._framework$_element;
          t2.toString;
          t2 = t1.getScrollPhysics$1(t2);
          newPhysics = t2;
        }
      }
      oldPhysics = oldWidget.physics;
      if (oldPhysics == null) {
        t1 = oldWidget.scrollBehavior;
        if (t1 == null)
          oldPhysics = _null;
        else {
          t2 = _this._framework$_element;
          t2.toString;
          t2 = t1.getScrollPhysics$1(t2);
          oldPhysics = t2;
        }
      }
      do {
        t1 = newPhysics == null;
        t2 = t1 ? _null : B.getRuntimeType(newPhysics);
        t3 = oldPhysics == null;
        if (t2 != (t3 ? _null : B.getRuntimeType(oldPhysics)))
          return true;
        newPhysics = t1 ? _null : newPhysics.parent;
        oldPhysics = t3 ? _null : oldPhysics.parent;
      } while (newPhysics != null || oldPhysics != null);
      t1 = _this._widget.controller;
      t1 = t1 == null ? _null : B.getRuntimeType(t1);
      t2 = oldWidget.controller;
      return t1 != (t2 == null ? _null : B.getRuntimeType(t2));
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      _this.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$didUpdateWidget(oldWidget);
      t1 = oldWidget.controller;
      if (_this._widget.controller != t1) {
        if (t1 == null) {
          t1 = _this._fallbackScrollController;
          t1.toString;
          t2 = _this._scrollable$_position;
          t2.toString;
          t1.detach$1(0, t2);
          _this._fallbackScrollController.dispose$0();
          _this._fallbackScrollController = null;
        } else {
          t2 = _this._scrollable$_position;
          t2.toString;
          t1.detach$1(0, t2);
          if (_this._widget.controller == null)
            _this._fallbackScrollController = B.ScrollController$();
        }
        t1 = _this.get$_effectiveScrollController();
        t2 = _this._scrollable$_position;
        t2.toString;
        t1.attach$1(t2);
      }
      if (_this._shouldUpdatePosition$1(oldWidget))
        _this._updatePosition$0();
    },
    dispose$0() {
      var t2, _this = this,
        t1 = _this._widget.controller;
      if (t1 != null) {
        t2 = _this._scrollable$_position;
        t2.toString;
        t1.detach$1(0, t2);
      } else {
        t1 = _this._fallbackScrollController;
        if (t1 != null) {
          t2 = _this._scrollable$_position;
          t2.toString;
          t1.detach$1(0, t2);
        }
        t1 = _this._fallbackScrollController;
        if (t1 != null)
          t1.dispose$0();
      }
      _this._scrollable$_position.dispose$0();
      t1 = _this._persistedScrollOffset;
      t2 = t1._restoration0$_owner;
      if (t2 != null) {
        t2 = t2.RestorationMixin__properties.remove$1(0, t1);
        t2.toString;
        t1.removeListener$1(0, t2);
        t1._restoration0$_owner = t1._restoration0$_restorationId = null;
      }
      t1.super$ChangeNotifier$dispose();
      t1._restoration0$_disposed = true;
      _this.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$dispose();
    },
    setSemanticsActions$1(actions) {
      var t1 = this._gestureDetectorKey;
      if (t1.get$currentState() != null)
        t1.get$currentState().replaceSemanticsActions$1(actions);
    },
    setCanDrag$1(value) {
      var t1, t2, _this = this;
      if (value === _this._lastCanDrag)
        t1 = !value || B.axisDirectionToAxis(_this._widget.axisDirection) === _this._scrollable$_lastAxisDirection;
      else
        t1 = false;
      if (t1)
        return;
      if (!value) {
        _this._gestureRecognizers = C.Map_empty4;
        _this._scrollable$_handleDragCancel$0();
      } else {
        switch (B.axisDirectionToAxis(_this._widget.axisDirection).index) {
          case 1:
            _this._gestureRecognizers = B.LinkedHashMap_LinkedHashMap$_literal([C.Type_mLh, new B.GestureRecognizerFactoryWithHandlers(new A.ScrollableState_setCanDrag_closure(_this), new A.ScrollableState_setCanDrag_closure0(_this), type$.GestureRecognizerFactoryWithHandlers_VerticalDragGestureRecognizer)], type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
            break;
          case 0:
            _this._gestureRecognizers = B.LinkedHashMap_LinkedHashMap$_literal([C.Type_Vq1, new B.GestureRecognizerFactoryWithHandlers(new A.ScrollableState_setCanDrag_closure1(_this), new A.ScrollableState_setCanDrag_closure2(_this), type$.GestureRecognizerFactoryWithHandlers_HorizontalDragGestureRecognizer)], type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
            break;
        }
        value = true;
      }
      _this._lastCanDrag = value;
      _this._scrollable$_lastAxisDirection = B.axisDirectionToAxis(_this._widget.axisDirection);
      t1 = _this._gestureDetectorKey;
      if (t1.get$currentState() != null) {
        t1 = t1.get$currentState();
        t1._syncAll$1(_this._gestureRecognizers);
        if (!t1._widget.excludeFromSemantics) {
          t2 = t1._framework$_element.get$renderObject();
          t2.toString;
          type$.RenderSemanticsGestureHandler._as(t2);
          t1._gesture_detector$_semantics.assignSemantics$1(t2);
        }
      }
    },
    get$vsync() {
      return this;
    },
    setIgnorePointer$1(value) {
      var t1, _this = this;
      if (_this._shouldIgnorePointer === value)
        return;
      _this._shouldIgnorePointer = value;
      t1 = _this._ignorePointerKey;
      if ($.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1) != null) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        type$.RenderIgnorePointer._as(t1).set$ignoring(_this._shouldIgnorePointer);
      }
    },
    get$notificationContext() {
      return $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._gestureDetectorKey);
    },
    get$storageContext() {
      var t1 = this._framework$_element;
      t1.toString;
      return t1;
    },
    _handleDragDown$1(details) {
      var t1 = this._scrollable$_position,
        previousVelocity = t1._activity.get$velocity(),
        holdActivity = new B.HoldScrollActivity(this.get$_disposeHold(), t1);
      t1.beginActivity$1(holdActivity);
      t1._heldPreviousVelocity = previousVelocity;
      this._hold = holdActivity;
    },
    _scrollable$_handleDragStart$1(details) {
      var t4, drag,
        t1 = this._scrollable$_position,
        t2 = t1.physics,
        t3 = t2.carriedMomentum$1(t1._heldPreviousVelocity);
      t2 = t2.get$dragStartDistanceMotionThreshold();
      t4 = t2 == null ? null : 0;
      drag = new B.ScrollDragController(t1, this.get$_disposeDrag(), t3, t2, details.sourceTimeStamp, t3 !== 0, t4, details);
      t1.beginActivity$1(new B.DragScrollActivity(drag, t1));
      this._scrollable$_drag = t1._currentDrag = drag;
    },
    _scrollable$_handleDragUpdate$1(details) {
      var t1 = this._scrollable$_drag;
      if (t1 != null)
        t1.update$1(0, details);
    },
    _scrollable$_handleDragEnd$1(details) {
      var t2, velocity, t3, isVelocityNotSubstantiallyLessThanCarriedMomentum,
        t1 = this._scrollable$_drag;
      if (t1 != null) {
        t2 = details.primaryVelocity;
        t2.toString;
        velocity = -t2;
        if (B.axisDirectionIsReversed(t1._delegate.context._widget.axisDirection))
          velocity = -velocity;
        t1._lastDetails = details;
        if (t1._retainMomentum) {
          t2 = J.get$sign$in(velocity);
          t3 = t1.carriedVelocity;
          isVelocityNotSubstantiallyLessThanCarriedMomentum = Math.abs(velocity) > Math.abs(t3) * 0.5;
          if (t2 === J.get$sign$in(t3) && isVelocityNotSubstantiallyLessThanCarriedMomentum)
            velocity += t3;
        }
        t1._delegate.goBallistic$1(velocity);
      }
    },
    _scrollable$_handleDragCancel$0() {
      var t1 = this._hold;
      if (t1 != null)
        t1._delegate.goBallistic$1(0);
      t1 = this._scrollable$_drag;
      if (t1 != null)
        t1._delegate.goBallistic$1(0);
    },
    _disposeHold$0() {
      this._hold = null;
    },
    _disposeDrag$0() {
      this._scrollable$_drag = null;
    },
    _targetScrollOffsetForPointerScroll$1(delta) {
      var t3,
        t1 = this._scrollable$_position,
        t2 = t1._pixels;
      t2.toString;
      t3 = t1._scroll_position$_minScrollExtent;
      t3.toString;
      t3 = Math.max(t2 + delta, t3);
      t1 = t1._scroll_position$_maxScrollExtent;
      t1.toString;
      return Math.min(t3, t1);
    },
    _pointerSignalEventDelta$1($event) {
      var delta = B.axisDirectionToAxis(this._widget.axisDirection) === C.Axis_0 ? $event.get$scrollDelta()._dx : $event.get$scrollDelta()._dy;
      return B.axisDirectionIsReversed(this._widget.axisDirection) ? delta * -1 : delta;
    },
    _receivedPointerSignal$1($event) {
      var t1, t2, delta, targetScrollOffset, _this = this;
      if (type$.PointerScrollEvent._is($event) && _this._scrollable$_position != null) {
        t1 = _this._physics;
        if (t1 != null) {
          t2 = _this._scrollable$_position;
          t2.toString;
          t2 = !t1.shouldAcceptUserOffset$1(t2);
          t1 = t2;
        } else
          t1 = false;
        if (t1)
          return;
        delta = _this._pointerSignalEventDelta$1($event);
        targetScrollOffset = _this._targetScrollOffsetForPointerScroll$1(delta);
        if (delta !== 0) {
          t1 = _this._scrollable$_position._pixels;
          t1.toString;
          t1 = targetScrollOffset !== t1;
        } else
          t1 = false;
        if (t1)
          $.GestureBinding__instance.GestureBinding_pointerSignalResolver.register$2(0, $event, _this.get$_handlePointerScroll());
      }
    },
    _handlePointerScroll$1($event) {
      var t1, t2, t3, t4, targetPixels, _this = this,
        delta = _this._pointerSignalEventDelta$1($event),
        targetScrollOffset = _this._targetScrollOffsetForPointerScroll$1(delta);
      if (delta !== 0) {
        t1 = _this._scrollable$_position._pixels;
        t1.toString;
        t1 = targetScrollOffset !== t1;
      } else
        t1 = false;
      if (t1) {
        t1 = _this._scrollable$_position;
        t2 = t1._pixels;
        t2.toString;
        t3 = t1._scroll_position$_minScrollExtent;
        t3.toString;
        t3 = Math.max(t2 + delta, t3);
        t4 = t1._scroll_position$_maxScrollExtent;
        t4.toString;
        targetPixels = Math.min(t3, t4);
        if (targetPixels !== t2) {
          t1.beginActivity$1(new B.IdleScrollActivity(t1));
          t1.updateUserScrollDirection$1(-delta > 0 ? C.ScrollDirection_1 : C.ScrollDirection_2);
          t2 = t1._pixels;
          t2.toString;
          t1.forcePixels$1(targetPixels);
          t1.isScrollingNotifier.set$value(0, true);
          t1.didStartScroll$0();
          t3 = t1._pixels;
          t3.toString;
          t1.didUpdateScrollPositionBy$1(t3 - t2);
          t1.didEndScroll$0();
          t1.goBallistic$1(0);
        }
      }
    },
    _scrollable$_handleScrollMetricsNotification$1(notification) {
      var t1, scrollSemanticsRenderObject;
      if (notification.ViewportNotificationMixin__depth === 0) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._scrollSemanticsKey);
        scrollSemanticsRenderObject = t1 == null ? null : t1.get$renderObject();
        if (scrollSemanticsRenderObject != null)
          scrollSemanticsRenderObject.markNeedsSemanticsUpdate$0();
      }
      return false;
    },
    build$1(context) {
      var t2, t3, t4, result, details, registrar, _this = this, _null = null,
        t1 = _this._scrollable$_position;
      t1.toString;
      t2 = _this._gestureRecognizers;
      t3 = _this._widget;
      t4 = t3.excludeFromSemantics;
      result = new A._ScrollableScope(_this, t1, B.Listener$(C.HitTestBehavior_0, new B.RawGestureDetector(B.Semantics$(_null, new B.IgnorePointer(_this._shouldIgnorePointer, false, t3.viewportBuilder$2(context, t1), _this._ignorePointerKey), false, _null, false, !t4, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), t2, C.HitTestBehavior_1, t4, _null, _this._gestureDetectorKey), _null, _null, _null, _this.get$_receivedPointerSignal(), _null), _null);
      t1 = _this._widget;
      if (!t1.excludeFromSemantics) {
        t1 = _this._scrollable$_position;
        t1.toString;
        t2 = _this._physics.get$allowImplicitScrolling();
        t3 = _this._widget;
        result = new B.NotificationListener(_this.get$_scrollable$_handleScrollMetricsNotification(), new A._ScrollSemantics(t1, t2, t3.semanticChildCount, result, _this._scrollSemanticsKey), _null, type$.NotificationListener_ScrollMetricsNotification);
        t1 = t3;
      }
      details = new A.ScrollableDetails(t1.axisDirection, _this.get$_effectiveScrollController(), _this._widget.clipBehavior);
      t1 = _this.__ScrollableState__configuration_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      result = t1.buildScrollbar$3(context, t1.buildOverscrollIndicator$3(context, result, details), details);
      registrar = B.SelectionContainer_maybeOf(context);
      if (registrar != null) {
        t1 = _this._scrollable$_position;
        t1.toString;
        result = new A._ScrollableSelectionHandler(_this, t1, result, registrar, _null);
      }
      return result;
    },
    get$restorationId() {
      return this._widget.restorationId;
    }
  };
  A._ScrollableSelectionHandler.prototype = {
    createState$0() {
      return new A._ScrollableSelectionHandlerState(C._StateLifecycle_0);
    }
  };
  A._ScrollableSelectionHandlerState.prototype = {
    initState$0() {
      var t1, t2, t3, t4;
      this.super$State$initState();
      t1 = this._widget;
      t2 = t1.state;
      t1 = t1.position;
      t3 = type$.Selectable;
      t4 = type$.double;
      t3 = new A._ScrollableSelectionContainerDelegate(t2, new A.EdgeDraggingAutoScroller(t2, 30), t1, B.LinkedHashMap_LinkedHashMap$_empty(t3, t4), B.LinkedHashMap_LinkedHashMap$_empty(t3, t4), B._setArrayType([], type$.JSArray_Selectable), B.LinkedHashSet_LinkedHashSet$_empty(t3), D.SelectionGeometry_wEo0, $.$get$ChangeNotifier__emptyListeners());
      t1.addListener$1(0, t3.get$_scheduleLayoutChange());
      this.___ScrollableSelectionHandlerState__selectionDelegate_A = t3;
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2;
      this.super$State$didUpdateWidget(oldWidget);
      t1 = this._widget.position;
      if (oldWidget.position !== t1) {
        t2 = this.___ScrollableSelectionHandlerState__selectionDelegate_A;
        t2 === $ && B.throwUnnamedLateFieldNI();
        t2.set$position(0, t1);
      }
    },
    dispose$0() {
      var t1 = this.___ScrollableSelectionHandlerState__selectionDelegate_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1._selectableStartEdgeUpdateRecords.clear$0(0);
      t1._selectableEndEdgeUpdateRecords.clear$0(0);
      t1._scheduledLayoutChange = false;
      t1._autoScroller._scrolling = false;
      t1.super$MultiSelectableSelectionContainerDelegate$dispose();
      this.super$State$dispose();
    },
    build$1(context) {
      var t1 = this._widget,
        t2 = t1.registrar,
        t3 = this.___ScrollableSelectionHandlerState__selectionDelegate_A;
      t3 === $ && B.throwUnnamedLateFieldNI();
      return new A.SelectionContainer(t2, t1.child, t3, null);
    }
  };
  A.EdgeDraggingAutoScroller.prototype = {
    _offsetExtent$2(offset, scrollDirection) {
      switch (scrollDirection.index) {
        case 0:
          return offset._dx;
        case 1:
          return offset._dy;
      }
    },
    _sizeExtent$2(size, scrollDirection) {
      switch (scrollDirection.index) {
        case 0:
          return size._dx;
        case 1:
          return size._dy;
      }
    },
    startAutoScrollIfNecessary$1(dragTarget) {
      var _this = this,
        deltaToOrigin = A._getDeltaToScrollOrigin(_this.scrollable);
      _this.__EdgeDraggingAutoScroller__dragTargetRelatedToScrollOrigin_A = dragTarget.translate$2(0, deltaToOrigin._dx, deltaToOrigin._dy);
      if (_this._scrolling)
        return;
      _this._scroll$0();
    },
    _scroll$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t3, globalRect, deltaToOrigin, viewportStart, viewportEnd, proxyStart, proxyEnd, overDrag, newOffset, duration, t1, t2;
      var $async$_scroll$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.scrollable;
              t2 = t1._framework$_element.get$renderObject();
              t2.toString;
              type$.RenderBox._as(t2);
              t3 = t2.getTransformTo$1(0, null);
              t2 = t2._size;
              globalRect = B.MatrixUtils_transformRect(t3, new B.Rect(0, 0, 0 + t2._dx, 0 + t2._dy));
              $async$self._scrolling = true;
              deltaToOrigin = A._getDeltaToScrollOrigin(t1);
              t2 = globalRect.left;
              t3 = globalRect.top;
              viewportStart = $async$self._offsetExtent$2(new B.Offset(t2 + deltaToOrigin._dx, t3 + deltaToOrigin._dy), B.axisDirectionToAxis(t1._widget.axisDirection));
              viewportEnd = viewportStart + $async$self._sizeExtent$2(new B.Size(globalRect.right - t2, globalRect.bottom - t3), B.axisDirectionToAxis(t1._widget.axisDirection));
              t3 = $async$self.__EdgeDraggingAutoScroller__dragTargetRelatedToScrollOrigin_A;
              t3 === $ && B.throwUnnamedLateFieldNI();
              proxyStart = $async$self._offsetExtent$2(new B.Offset(t3.left, t3.top), B.axisDirectionToAxis(t1._widget.axisDirection));
              t3 = $async$self.__EdgeDraggingAutoScroller__dragTargetRelatedToScrollOrigin_A;
              proxyEnd = $async$self._offsetExtent$2(new B.Offset(t3.right, t3.bottom), B.axisDirectionToAxis(t1._widget.axisDirection));
              overDrag = B._Cell$named("overDrag");
              t2 = t1._widget.axisDirection;
              if (t2 === C.AxisDirection_0 || t2 === C.AxisDirection_3) {
                if (proxyEnd > viewportEnd) {
                  t2 = t1._scrollable$_position;
                  t3 = t2._pixels;
                  t3.toString;
                  t2 = t2._scroll_position$_minScrollExtent;
                  t2.toString;
                  t2 = t3 > t2;
                } else
                  t2 = false;
                if (t2) {
                  overDrag.__late_helper$_value = Math.max(proxyEnd - viewportEnd, 20);
                  t2 = t1._scrollable$_position;
                  t3 = t2._scroll_position$_minScrollExtent;
                  t3.toString;
                  t2 = t2._pixels;
                  t2.toString;
                  newOffset = Math.max(t3, t2 - overDrag._readLocal$0());
                } else {
                  if (proxyStart < viewportStart) {
                    t2 = t1._scrollable$_position;
                    t3 = t2._pixels;
                    t3.toString;
                    t2 = t2._scroll_position$_maxScrollExtent;
                    t2.toString;
                    t2 = t3 < t2;
                  } else
                    t2 = false;
                  if (t2) {
                    overDrag.__late_helper$_value = Math.max(viewportStart - proxyStart, 20);
                    t2 = t1._scrollable$_position;
                    t3 = t2._scroll_position$_maxScrollExtent;
                    t3.toString;
                    t2 = t2._pixels;
                    t2.toString;
                    newOffset = Math.min(t3, t2 + overDrag._readLocal$0());
                  } else
                    newOffset = null;
                }
              } else {
                if (proxyStart < viewportStart) {
                  t2 = t1._scrollable$_position;
                  t3 = t2._pixels;
                  t3.toString;
                  t2 = t2._scroll_position$_minScrollExtent;
                  t2.toString;
                  t2 = t3 > t2;
                } else
                  t2 = false;
                if (t2) {
                  overDrag.__late_helper$_value = Math.max(viewportStart - proxyStart, 20);
                  t2 = t1._scrollable$_position;
                  t3 = t2._scroll_position$_minScrollExtent;
                  t3.toString;
                  t2 = t2._pixels;
                  t2.toString;
                  newOffset = Math.max(t3, t2 - overDrag._readLocal$0());
                } else {
                  if (proxyEnd > viewportEnd) {
                    t2 = t1._scrollable$_position;
                    t3 = t2._pixels;
                    t3.toString;
                    t2 = t2._scroll_position$_maxScrollExtent;
                    t2.toString;
                    t2 = t3 < t2;
                  } else
                    t2 = false;
                  if (t2) {
                    overDrag.__late_helper$_value = Math.max(proxyEnd - viewportEnd, 20);
                    t2 = t1._scrollable$_position;
                    t3 = t2._scroll_position$_maxScrollExtent;
                    t3.toString;
                    t2 = t2._pixels;
                    t2.toString;
                    newOffset = Math.min(t3, t2 + overDrag._readLocal$0());
                  } else
                    newOffset = null;
                }
              }
              if (newOffset != null) {
                t2 = t1._scrollable$_position._pixels;
                t2.toString;
                t2 = Math.abs(newOffset - t2) < 1;
              } else
                t2 = true;
              if (t2) {
                $async$self._scrolling = false;
                // goto return
                $async$goto = 1;
                break;
              }
              duration = B.Duration$(0, C.JSNumber_methods.round$0(1000 / $async$self.velocityScalar));
              $async$goto = 3;
              return B._asyncAwait(t1._scrollable$_position.animateTo$3$curve$duration(newOffset, C.C__Linear, duration), $async$_scroll$0);
            case 3:
              // returning from await.
              $async$goto = $async$self._scrolling ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return B._asyncAwait($async$self._scroll$0(), $async$_scroll$0);
            case 6:
              // returning from await.
            case 5:
              // join
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$_scroll$0, $async$completer);
    }
  };
  A._ScrollableSelectionContainerDelegate.prototype = {
    set$position(_, other) {
      var t2,
        t1 = this._scrollable$_position;
      if (other === t1)
        return;
      t2 = this.get$_scheduleLayoutChange();
      t1.removeListener$1(0, t2);
      this._scrollable$_position = other;
      other.addListener$1(0, t2);
    },
    _scheduleLayoutChange$0() {
      if (this._scheduledLayoutChange)
        return;
      this._scheduledLayoutChange = true;
      $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A._ScrollableSelectionContainerDelegate__scheduleLayoutChange_closure(this));
    },
    didChangeSelectables$0() {
      var _this = this,
        t1 = _this.selectables,
        selectableSet = B.LinkedHashSet_LinkedHashSet$from(t1, B._arrayInstanceType(t1)._precomputed1);
      t1 = _this._selectableStartEdgeUpdateRecords;
      t1.removeWhere$1(t1, new A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure(selectableSet));
      t1 = _this._selectableEndEdgeUpdateRecords;
      t1.removeWhere$1(t1, new A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure0(selectableSet));
      _this.super$MultiSelectableSelectionContainerDelegate$didChangeSelectables();
    },
    handleSelectionEdgeUpdate$1($event) {
      var deltaToOrigin, t1, t2, t3, result, _this = this;
      if (_this._currentDragEndRelatedToOrigin == null && _this._currentDragStartRelatedToOrigin == null)
        _this._selectionStartsInScrollable = _this._globalPositionInScrollable$1($event.globalPosition);
      deltaToOrigin = A._getDeltaToScrollOrigin(_this.state);
      t1 = $event.globalPosition;
      t2 = -deltaToOrigin._dx;
      t3 = -deltaToOrigin._dy;
      if ($event.type === C.SelectionEventType_1) {
        t1 = _this._currentDragEndRelatedToOrigin = _this._inferPositionRelatedToOrigin$1(t1);
        $event = new A.SelectionEdgeUpdateEvent(new B.Offset(t1._dx + t2, t1._dy + t3), C.SelectionEventType_1);
      } else {
        t1 = _this._currentDragStartRelatedToOrigin = _this._inferPositionRelatedToOrigin$1(t1);
        $event = new A.SelectionEdgeUpdateEvent(new B.Offset(t1._dx + t2, t1._dy + t3), C.SelectionEventType_0);
      }
      result = _this.super$MultiSelectableSelectionContainerDelegate$handleSelectionEdgeUpdate($event);
      if (result === D.SelectionResult_3) {
        _this._autoScroller._scrolling = false;
        return result;
      }
      if (_this._selectionStartsInScrollable) {
        t1 = _this._autoScroller;
        t1.startAutoScrollIfNecessary$1(B.Rect$fromCenter($event.globalPosition, 200, 200));
        if (t1._scrolling)
          return D.SelectionResult_3;
      }
      return result;
    },
    _inferPositionRelatedToOrigin$1(globalPosition) {
      var localPosition, t3, t4, deltaToOrigin,
        t1 = this.state,
        t2 = t1._framework$_element.get$renderObject();
      t2.toString;
      type$.RenderBox._as(t2);
      localPosition = t2.globalToLocal$1(globalPosition);
      if (!this._selectionStartsInScrollable) {
        t3 = localPosition._dy;
        if (t3 < 0 || localPosition._dx < 0)
          return B.MatrixUtils_transformPoint(t2.getTransformTo$1(0, null), C.Offset_0_0);
        t4 = t2._size;
        if (t3 > t4._dy || localPosition._dx > t4._dx)
          return D.Offset_YZQ;
      }
      deltaToOrigin = A._getDeltaToScrollOrigin(t1);
      t1 = deltaToOrigin._dx;
      t3 = deltaToOrigin._dy;
      return B.MatrixUtils_transformPoint(t2.getTransformTo$1(0, null), new B.Offset(localPosition._dx + t1, localPosition._dy + t3));
    },
    _updateDragLocationsFromGeometries$0() {
      var transform, t2, _this = this,
        t1 = _this.state,
        deltaToOrigin = A._getDeltaToScrollOrigin(t1);
      t1 = t1._framework$_element.get$renderObject();
      t1.toString;
      type$.RenderBox._as(t1);
      transform = t1.getTransformTo$1(0, null);
      t2 = _this.currentSelectionStartIndex;
      if (t2 !== -1) {
        t2 = J.get$value$z(_this.selectables[t2]).startSelectionPoint;
        t2.toString;
        _this._currentDragStartRelatedToOrigin = B.MatrixUtils_transformPoint(transform, B.MatrixUtils_transformPoint(J.getTransformTo$1$z(_this.selectables[_this.currentSelectionStartIndex], t1), t2.localPosition.$add(0, new B.Offset(0, -t2.lineHeight / 2))).$add(0, deltaToOrigin));
      }
      t2 = _this.currentSelectionEndIndex;
      if (t2 !== -1) {
        t2 = J.get$value$z(_this.selectables[t2]).endSelectionPoint;
        t2.toString;
        _this._currentDragEndRelatedToOrigin = B.MatrixUtils_transformPoint(transform, B.MatrixUtils_transformPoint(J.getTransformTo$1$z(_this.selectables[_this.currentSelectionEndIndex], t1), t2.localPosition.$add(0, new B.Offset(0, -t2.lineHeight / 2))).$add(0, deltaToOrigin));
      }
    },
    _globalPositionInScrollable$1(globalPosition) {
      var localPosition,
        t1 = this.state._framework$_element.get$renderObject();
      t1.toString;
      type$.RenderBox._as(t1);
      localPosition = t1.globalToLocal$1(globalPosition);
      t1 = t1._size;
      return new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy).contains$1(0, localPosition);
    },
    dispatchSelectionEventToChild$2(selectable, $event) {
      var t1, t2, _this = this;
      switch ($event.type.index) {
        case 0:
          t1 = _this.state._scrollable$_position._pixels;
          t1.toString;
          _this._selectableStartEdgeUpdateRecords.$indexSet(0, selectable, t1);
          _this.ensureChildUpdated$1(selectable);
          break;
        case 1:
          t1 = _this.state._scrollable$_position._pixels;
          t1.toString;
          _this._selectableEndEdgeUpdateRecords.$indexSet(0, selectable, t1);
          _this.ensureChildUpdated$1(selectable);
          break;
        case 2:
          _this._selectableEndEdgeUpdateRecords.remove$1(0, selectable);
          _this._selectableStartEdgeUpdateRecords.remove$1(0, selectable);
          break;
        case 3:
        case 4:
          t1 = _this.state;
          t2 = t1._scrollable$_position._pixels;
          t2.toString;
          _this._selectableEndEdgeUpdateRecords.$indexSet(0, selectable, t2);
          t1 = t1._scrollable$_position._pixels;
          t1.toString;
          _this._selectableStartEdgeUpdateRecords.$indexSet(0, selectable, t1);
          break;
      }
      return _this.super$MultiSelectableSelectionContainerDelegate$dispatchSelectionEventToChild(selectable, $event);
    },
    ensureChildUpdated$1(selectable) {
      var previousStartRecord, t3, t4, deltaToOrigin, t5, previousEndRecord, _this = this,
        t1 = _this.state,
        t2 = t1._scrollable$_position._pixels;
      t2.toString;
      previousStartRecord = _this._selectableStartEdgeUpdateRecords.$index(0, selectable);
      t3 = _this._currentDragStartRelatedToOrigin;
      if (t3 != null)
        t4 = previousStartRecord == null || Math.abs(t2 - previousStartRecord) > 1e-10;
      else
        t4 = false;
      if (t4) {
        deltaToOrigin = A._getDeltaToScrollOrigin(t1);
        t4 = deltaToOrigin._dx;
        t5 = deltaToOrigin._dy;
        selectable.dispatchSelectionEvent$1(new A.SelectionEdgeUpdateEvent(new B.Offset(t3._dx + -t4, t3._dy + -t5), C.SelectionEventType_0));
      }
      previousEndRecord = _this._selectableEndEdgeUpdateRecords.$index(0, selectable);
      t3 = _this._currentDragEndRelatedToOrigin;
      if (t3 != null)
        t2 = previousEndRecord == null || Math.abs(t2 - previousEndRecord) > 1e-10;
      else
        t2 = false;
      if (t2) {
        deltaToOrigin = A._getDeltaToScrollOrigin(t1);
        t1 = deltaToOrigin._dx;
        t2 = deltaToOrigin._dy;
        selectable.dispatchSelectionEvent$1(new A.SelectionEdgeUpdateEvent(new B.Offset(t3._dx + -t1, t3._dy + -t2), C.SelectionEventType_1));
      }
    }
  };
  A.ScrollableDetails.prototype = {};
  A._ScrollSemantics.prototype = {
    createRenderObject$1(context) {
      var t1 = this.position,
        t2 = new A._RenderScrollSemantics(t1, this.allowImplicitScrolling, this.semanticChildCount, null, B.LayerHandle$(type$.ContainerLayer));
      t2.RenderObject$0();
      t2.set$child(null);
      t1.addListener$1(0, t2.get$markNeedsSemanticsUpdate());
      return t2;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$allowImplicitScrolling(this.allowImplicitScrolling);
      renderObject.set$position(0, this.position);
      renderObject.set$semanticChildCount(this.semanticChildCount);
    }
  };
  A._RenderScrollSemantics.prototype = {
    set$position(_, value) {
      var t2, _this = this,
        t1 = _this._scrollable$_position;
      if (value === t1)
        return;
      t2 = _this.get$markNeedsSemanticsUpdate();
      t1.removeListener$1(0, t2);
      _this._scrollable$_position = value;
      value.addListener$1(0, t2);
      _this.markNeedsSemanticsUpdate$0();
    },
    set$allowImplicitScrolling(value) {
      if (value === this._allowImplicitScrolling)
        return;
      this._allowImplicitScrolling = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$semanticChildCount(value) {
      if (value == this._semanticChildCount)
        return;
      this._semanticChildCount = value;
      this.markNeedsSemanticsUpdate$0();
    },
    describeSemanticsConfiguration$1(config) {
      var t1, t2, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = true;
      if (_this._scrollable$_position._haveDimensions) {
        config._setFlag$2(C.SemanticsFlag_262144, _this._allowImplicitScrolling);
        t1 = _this._scrollable$_position;
        t2 = t1._pixels;
        t2.toString;
        config._scrollPosition = t2;
        config._hasBeenAnnotated = true;
        t2 = t1._scroll_position$_maxScrollExtent;
        t2.toString;
        config._scrollExtentMax = t2;
        t1 = t1._scroll_position$_minScrollExtent;
        t1.toString;
        config._scrollExtentMin = t1;
        config.set$scrollChildCount(_this._semanticChildCount);
      }
    },
    assembleSemanticsNode$3(node, config, children) {
      var t1, t2, excluded, included, firstVisibleIndex, _i, child, _this = this;
      if (children.length !== 0) {
        t1 = C.JSArray_methods.get$first(children).tags;
        t1 = !(t1 != null && t1.contains$1(0, D.SemanticsTag_FIw));
      } else
        t1 = true;
      if (t1) {
        _this.super$RenderObject$assembleSemanticsNode(node, config, children);
        return;
      }
      t1 = _this._innerNode;
      if (t1 == null)
        t1 = _this._innerNode = B.SemanticsNode$(null, _this.get$showOnScreen());
      t1.set$isMergedIntoParent(node._mergeAllDescendantsIntoThisNode || node._isMergedIntoParent);
      t1.set$rect(0, node._semantics$_rect);
      t1 = _this._innerNode;
      t1.toString;
      t2 = type$.JSArray_SemanticsNode;
      excluded = B._setArrayType([t1], t2);
      included = B._setArrayType([], t2);
      for (t1 = children.length, firstVisibleIndex = null, _i = 0; _i < children.length; children.length === t1 || (0, B.throwConcurrentModificationError)(children), ++_i) {
        child = children[_i];
        t2 = child.tags;
        if (t2 != null && t2.contains$1(0, D.SemanticsTag_bQQ))
          excluded.push(child);
        else {
          if ((child._flags & 8192) === 0)
            firstVisibleIndex = firstVisibleIndex == null ? child.indexInParent : firstVisibleIndex;
          included.push(child);
        }
      }
      config.set$scrollIndex(firstVisibleIndex);
      node.updateWith$2$childrenInInversePaintOrder$config(0, excluded, null);
      _this._innerNode.updateWith$2$childrenInInversePaintOrder$config(0, included, config);
    },
    clearSemantics$0() {
      this.super$RenderObject$clearSemantics();
      this._innerNode = null;
    }
  };
  A._RestorableScrollOffset.prototype = {
    createDefaultValue$0() {
      return null;
    },
    didUpdateValue$1(oldValue) {
      this.notifyListeners$0();
    },
    fromPrimitives$1(data) {
      data.toString;
      return B._asDouble(data);
    },
    toPrimitives$0() {
      var t1 = this._restoration_properties$_value;
      return t1 == null ? B._instanceType(this)._eval$1("RestorableValue.T")._as(t1) : t1;
    },
    get$enabled(_) {
      var t1 = this._restoration_properties$_value;
      return (t1 == null ? B._instanceType(this)._eval$1("RestorableValue.T")._as(t1) : t1) != null;
    }
  };
  A._ScrollableState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.TickerProviderStateMixin__tickerModeNotifier = null;
      _this.super$State$dispose();
    }
  };
  A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin.prototype = {
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(oldWidget);
      this.didUpdateRestorationId$0();
    },
    didChangeDependencies$0() {
      var oldBucket, needsRestore, t1, didReplaceBucket, _this = this;
      _this.super$State$didChangeDependencies();
      oldBucket = _this.RestorationMixin__bucket;
      needsRestore = _this.get$restorePending();
      t1 = _this._framework$_element;
      t1.toString;
      t1 = B.RestorationScope_of(t1);
      _this.RestorationMixin__currentParent = t1;
      didReplaceBucket = _this._updateBucketIfNecessary$2$parent$restorePending(t1, needsRestore);
      if (needsRestore) {
        _this.restoreState$2(oldBucket, _this.RestorationMixin__firstRestorePending);
        _this.RestorationMixin__firstRestorePending = false;
      }
      if (didReplaceBucket)
        if (oldBucket != null)
          oldBucket.dispose$0();
    },
    dispose$0() {
      var t1, _this = this;
      _this.RestorationMixin__properties.forEach$1(0, new A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin_dispose_closure());
      t1 = _this.RestorationMixin__bucket;
      if (t1 != null)
        t1.dispose$0();
      _this.RestorationMixin__bucket = null;
      _this.super$_ScrollableState_State_TickerProviderStateMixin$dispose();
    }
  };
  A.MultiSelectableSelectionContainerDelegate.prototype = {
    add$1(_, selectable) {
      this._additions.add$1(0, selectable);
      this._scheduleSelectableUpdate$0();
    },
    remove$1(_, selectable) {
      var index, t1, _this = this;
      if (_this._additions.remove$1(0, selectable))
        return;
      index = C.JSArray_methods.indexOf$1(_this.selectables, selectable);
      C.JSArray_methods.removeAt$1(_this.selectables, index);
      t1 = _this.currentSelectionEndIndex;
      if (index <= t1)
        _this.currentSelectionEndIndex = t1 - 1;
      t1 = _this.currentSelectionStartIndex;
      if (index <= t1)
        _this.currentSelectionStartIndex = t1 - 1;
      selectable.removeListener$1(0, _this.get$_handleSelectableGeometryChange());
      _this._scheduleSelectableUpdate$0();
    },
    _scheduleSelectableUpdate$0() {
      if (!this._scheduledSelectableUpdate) {
        this._scheduledSelectableUpdate = true;
        $.SchedulerBinding__instance.SchedulerBinding__postFrameCallbacks.push(new A.MultiSelectableSelectionContainerDelegate__scheduleSelectableUpdate_closure(this));
      }
    },
    _flushAdditions$0() {
      var existingSelectables, selectionStartIndex, selectionEndIndex, mergingIndex, existingIndex, t2, mergingSelectable, t3, _this = this,
        t1 = _this._additions,
        mergingSelectables = B.List_List$of(t1, true, B._instanceType(t1)._precomputed1);
      C.JSArray_methods.sort$1(mergingSelectables, _this.get$_compareScreenOrder());
      existingSelectables = _this.selectables;
      _this.selectables = B._setArrayType([], type$.JSArray_Selectable);
      selectionStartIndex = _this.currentSelectionStartIndex;
      selectionEndIndex = _this.currentSelectionEndIndex;
      t1 = _this.get$_handleSelectableGeometryChange();
      mergingIndex = 0;
      existingIndex = 0;
      while (true) {
        t2 = mergingSelectables.length;
        if (!(mergingIndex < t2 || existingIndex < existingSelectables.length))
          break;
        c$0: {
          if (mergingIndex < t2)
            t2 = existingIndex < existingSelectables.length && _this.compareOrder$2(existingSelectables[existingIndex], mergingSelectables[mergingIndex]) < 0;
          else
            t2 = true;
          if (t2) {
            if (existingIndex === _this.currentSelectionStartIndex)
              selectionStartIndex = _this.selectables.length;
            if (existingIndex === _this.currentSelectionEndIndex)
              selectionEndIndex = _this.selectables.length;
            C.JSArray_methods.add$1(_this.selectables, existingSelectables[existingIndex]);
            ++existingIndex;
            break c$0;
          }
          mergingSelectable = mergingSelectables[mergingIndex];
          t2 = _this.currentSelectionStartIndex;
          t3 = _this.currentSelectionEndIndex;
          if (existingIndex < Math.max(t2, t3) && existingIndex > Math.min(t2, t3))
            _this.ensureChildUpdated$1(mergingSelectable);
          mergingSelectable.addListener$1(0, t1);
          C.JSArray_methods.add$1(_this.selectables, mergingSelectable);
          ++mergingIndex;
        }
      }
      _this.currentSelectionEndIndex = selectionEndIndex;
      _this.currentSelectionStartIndex = selectionStartIndex;
      _this._additions = B.LinkedHashSet_LinkedHashSet$_empty(type$.Selectable);
    },
    didChangeSelectables$0() {
      this._updateSelectionGeometry$0();
    },
    _updateSelectionGeometry$0() {
      var _this = this,
        newValue = _this.getSelectionGeometry$0();
      if (!_this._selectionGeometry.$eq(0, newValue)) {
        _this._selectionGeometry = newValue;
        _this.notifyListeners$0();
      }
      _this._updateHandleLayersAndOwners$0();
    },
    get$compareOrder() {
      return this.get$_compareScreenOrder();
    },
    _compareScreenOrder$2(a, b) {
      var rectA = B.MatrixUtils_transformRect(a.getTransformTo$1(0, null), new B.Rect(0, 0, 0 + a.get$size(a)._dx, 0 + a.get$size(a)._dy)),
        rectB = B.MatrixUtils_transformRect(b.getTransformTo$1(0, null), new B.Rect(0, 0, 0 + b.get$size(b)._dx, 0 + b.get$size(b)._dy)),
        result = A.MultiSelectableSelectionContainerDelegate__compareVertically(rectA, rectB);
      if (result !== 0)
        return result;
      return A.MultiSelectableSelectionContainerDelegate__compareHorizontally(rectA, rectB);
    },
    _handleSelectableGeometryChange$0() {
      if (this._isHandlingSelectionEvent)
        return;
      this._updateSelectionGeometry$0();
    },
    getSelectionGeometry$0() {
      var startGeometry, startIndexWalker, forwardSelection, t2, t3, start, startPoint, endGeometry, endIndexWalker, end, endPoint, _this = this, _null = null,
        t1 = _this.currentSelectionEndIndex;
      if (t1 === -1 || _this.currentSelectionStartIndex === -1 || _this.selectables.length === 0)
        return new B.SelectionGeometry(_null, _null, C.SelectionStatus_2, _this.selectables.length !== 0);
      t1 = _this._adjustSelectionIndexBasedOnSelectionGeometry$2(_this.currentSelectionStartIndex, t1);
      _this.currentSelectionStartIndex = t1;
      _this.currentSelectionEndIndex = _this._adjustSelectionIndexBasedOnSelectionGeometry$2(_this.currentSelectionEndIndex, t1);
      startGeometry = J.get$value$z(_this.selectables[_this.currentSelectionStartIndex]);
      t1 = _this.currentSelectionEndIndex;
      startIndexWalker = _this.currentSelectionStartIndex;
      forwardSelection = t1 >= startIndexWalker;
      while (true) {
        if (!(startIndexWalker !== _this.currentSelectionEndIndex && startGeometry.startSelectionPoint == null))
          break;
        startIndexWalker += forwardSelection ? 1 : -1;
        startGeometry = J.get$value$z(_this.selectables[startIndexWalker]);
      }
      t1 = startGeometry.startSelectionPoint;
      if (t1 != null) {
        t2 = _this.selectables[startIndexWalker];
        t3 = _this._selectionContainerContext.get$renderObject();
        t3.toString;
        start = B.MatrixUtils_transformPoint(t2.getTransformTo$1(0, type$.RenderBox._as(t3)), t1.localPosition);
        startPoint = isFinite(start._dx) && isFinite(start._dy) ? new B.SelectionPoint(start, t1.lineHeight, t1.handleType) : _null;
      } else
        startPoint = _null;
      endGeometry = J.get$value$z(_this.selectables[_this.currentSelectionEndIndex]);
      endIndexWalker = _this.currentSelectionEndIndex;
      while (true) {
        if (!(endIndexWalker !== _this.currentSelectionStartIndex && endGeometry.endSelectionPoint == null))
          break;
        endIndexWalker += forwardSelection ? -1 : 1;
        endGeometry = J.get$value$z(_this.selectables[endIndexWalker]);
      }
      t1 = endGeometry.endSelectionPoint;
      if (t1 != null) {
        t2 = _this.selectables[endIndexWalker];
        t3 = _this._selectionContainerContext.get$renderObject();
        t3.toString;
        end = B.MatrixUtils_transformPoint(t2.getTransformTo$1(0, type$.RenderBox._as(t3)), t1.localPosition);
        endPoint = isFinite(end._dx) && isFinite(end._dy) ? new B.SelectionPoint(end, t1.lineHeight, t1.handleType) : _null;
      } else
        endPoint = _null;
      return new B.SelectionGeometry(startPoint, endPoint, !startGeometry.$eq(0, endGeometry) ? C.SelectionStatus_0 : startGeometry.status, true);
    },
    _adjustSelectionIndexBasedOnSelectionGeometry$2(currentIndex, towardIndex) {
      var $forward = towardIndex > currentIndex;
      while (true) {
        if (!(currentIndex !== towardIndex && J.get$value$z(this.selectables[currentIndex]).status !== C.SelectionStatus_0))
          break;
        currentIndex += $forward ? 1 : -1;
      }
      return currentIndex;
    },
    pushHandleLayers$2(startHandle, endHandle) {
      return;
    },
    _updateHandleLayersAndOwners$0() {
      var t2, _this = this, _null = null,
        effectiveStartHandle = _this._startHandleLayer,
        effectiveEndHandle = _this._endHandleLayer,
        t1 = _this.currentSelectionStartIndex;
      if (t1 === -1 || _this.currentSelectionEndIndex === -1) {
        t1 = _this._startHandleLayerOwner;
        if (t1 != null) {
          t1.pushHandleLayers$2(_null, _null);
          _this._startHandleLayerOwner = null;
        }
        t1 = _this._endHandleLayerOwner;
        if (t1 != null) {
          t1.pushHandleLayers$2(_null, _null);
          _this._endHandleLayerOwner = null;
        }
        return;
      }
      if (!J.$eq$(_this.selectables[t1], _this._startHandleLayerOwner)) {
        t1 = _this._startHandleLayerOwner;
        if (t1 != null)
          t1.pushHandleLayers$2(_null, _null);
      }
      if (!J.$eq$(_this.selectables[_this.currentSelectionEndIndex], _this._endHandleLayerOwner)) {
        t1 = _this._endHandleLayerOwner;
        if (t1 != null)
          t1.pushHandleLayers$2(_null, _null);
      }
      t1 = _this.selectables;
      t2 = _this.currentSelectionStartIndex;
      t1 = _this._startHandleLayerOwner = t1[t2];
      if (t2 === _this.currentSelectionEndIndex) {
        _this._endHandleLayerOwner = t1;
        t1.pushHandleLayers$2(effectiveStartHandle, effectiveEndHandle);
        return;
      }
      t1.pushHandleLayers$2(effectiveStartHandle, _null);
      t1 = _this.selectables[_this.currentSelectionEndIndex];
      _this._endHandleLayerOwner = t1;
      t1.pushHandleLayers$2(_null, effectiveEndHandle);
    },
    handleSelectAll$1($event) {
      var t1, t2, _i, _this = this;
      for (t1 = _this.selectables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        _this.dispatchSelectionEventToChild$2(t1[_i], $event);
      _this.currentSelectionStartIndex = 0;
      _this.currentSelectionEndIndex = _this.selectables.length - 1;
      return C.SelectionResult_4;
    },
    handleSelectWord$1($event) {
      var index, t1, t2, existingGeometry, _this = this;
      for (index = 0; t1 = _this.selectables, index < t1.length; ++index) {
        t1 = J.get$size$x(t1[index]);
        t2 = J.get$size$x(_this.selectables[index]);
        if (B.MatrixUtils_transformRect(J.getTransformTo$1$z(_this.selectables[index], null), new B.Rect(0, 0, 0 + t1._dx, 0 + t2._dy)).contains$1(0, $event.get$globalPosition())) {
          existingGeometry = J.get$value$z(_this.selectables[index]);
          _this.dispatchSelectionEventToChild$2(_this.selectables[index], $event);
          if (!J.get$value$z(_this.selectables[index]).$eq(0, existingGeometry)) {
            t1 = _this.selectables;
            new B.WhereIterable(t1, new A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure(_this, index), B._arrayInstanceType(t1)._eval$1("WhereIterable<1>")).forEach$1(0, new A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure0(_this));
            _this.currentSelectionStartIndex = _this.currentSelectionEndIndex = index;
          }
          return C.SelectionResult_2;
        }
      }
      return C.SelectionResult_4;
    },
    handleClearSelection$1($event) {
      var t1, t2, _i, _this = this;
      for (t1 = _this.selectables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        _this.dispatchSelectionEventToChild$2(t1[_i], $event);
      _this.currentSelectionStartIndex = _this.currentSelectionEndIndex = -1;
      return C.SelectionResult_4;
    },
    handleSelectionEdgeUpdate$1($event) {
      var _this = this;
      if ($event.type === C.SelectionEventType_1)
        return _this.currentSelectionEndIndex === -1 ? _this._initSelection$2$isEnd($event, true) : _this._adjustSelection$2$isEnd($event, true);
      return _this.currentSelectionStartIndex === -1 ? _this._initSelection$2$isEnd($event, false) : _this._adjustSelection$2$isEnd($event, false);
    },
    dispose$0() {
      var t1, t2, t3, _i, _this = this;
      for (t1 = _this.selectables, t2 = t1.length, t3 = _this.get$_handleSelectableGeometryChange(), _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        J.removeListener$1$x(t1[_i], t3);
      _this.selectables = D.List_empty14;
      _this._scheduledSelectableUpdate = false;
      _this.super$ChangeNotifier$dispose();
    },
    dispatchSelectionEventToChild$2(selectable, $event) {
      return selectable.dispatchSelectionEvent$1($event);
    },
    _initSelection$2$isEnd($event, isEnd) {
      var t1, _this = this, newIndex = -1,
        hasFoundEdgeIndex = false,
        result = null, index = 0;
      while (true) {
        t1 = _this.selectables;
        if (!(index < t1.length && !hasFoundEdgeIndex))
          break;
        switch (_this.dispatchSelectionEventToChild$2(t1[index], $event).index) {
          case 0:
          case 4:
            newIndex = index;
            break;
          case 2:
            newIndex = index;
            hasFoundEdgeIndex = true;
            result = C.SelectionResult_2;
            break;
          case 1:
            if (index === 0) {
              newIndex = 0;
              result = C.SelectionResult_1;
            }
            if (result == null)
              result = C.SelectionResult_2;
            hasFoundEdgeIndex = true;
            break;
          case 3:
            newIndex = index;
            hasFoundEdgeIndex = true;
            result = D.SelectionResult_3;
            break;
        }
        ++index;
      }
      if (newIndex === -1)
        return C.SelectionResult_4;
      if (isEnd)
        _this.currentSelectionEndIndex = newIndex;
      else
        _this.currentSelectionStartIndex = newIndex;
      return result == null ? C.SelectionResult_0 : result;
    },
    _adjustSelection$2$isEnd($event, isEnd) {
      var t1, finalResult0, _this = this,
        newIndex = isEnd ? _this.currentSelectionEndIndex : _this.currentSelectionStartIndex,
        currentSelectableResult = B._Cell$named("currentSelectableResult"),
        finalResult = null, $forward = null;
      while (true) {
        t1 = _this.selectables;
        if (!(newIndex < t1.length && newIndex >= 0 && finalResult == null))
          break;
        finalResult0 = currentSelectableResult.__late_helper$_value = _this.dispatchSelectionEventToChild$2(t1[newIndex], $event);
        switch (finalResult0.index) {
          case 2:
          case 3:
          case 4:
            finalResult = finalResult0;
            break;
          case 0:
            if ($forward === false) {
              ++newIndex;
              finalResult = C.SelectionResult_2;
            } else if (newIndex === _this.selectables.length - 1)
              finalResult = finalResult0;
            else {
              ++newIndex;
              $forward = true;
            }
            break;
          case 1:
            if ($forward === true) {
              --newIndex;
              finalResult = C.SelectionResult_2;
            } else if (newIndex === 0)
              finalResult = finalResult0;
            else {
              --newIndex;
              $forward = false;
            }
            break;
        }
      }
      if (isEnd)
        _this.currentSelectionEndIndex = newIndex;
      else
        _this.currentSelectionStartIndex = newIndex;
      finalResult.toString;
      return finalResult;
    },
    compareOrder$2(arg0, arg1) {
      return this.get$compareOrder().call$2(arg0, arg1);
    }
  };
  A._MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier.prototype = {};
  A.SelectionContainer.prototype = {
    createState$0() {
      return new A._SelectionContainerState(B.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function), null, false, C._StateLifecycle_0);
    }
  };
  A._SelectionContainerState.prototype = {
    initState$0() {
      var t1, t2, t3, _this = this;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = t1.delegate;
      t3 = _this._framework$_element;
      t3.toString;
      t2._selectionContainerContext = t3;
      _this.set$registrar(t1.registrar);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, t3, t4, listener, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.delegate;
      if (t1 !== _this._widget.delegate) {
        t1._selectionContainerContext = null;
        t2 = _this._selection_container$_listeners;
        t2.forEach$1(0, t1.get$removeListener(t1));
        t3 = _this._widget.delegate;
        t4 = _this._framework$_element;
        t4.toString;
        t3._selectionContainerContext = t4;
        t2.forEach$1(0, t3.get$addListener(t3));
        t1 = t1._selectionGeometry;
        t3 = _this._widget.delegate._selectionGeometry;
        if (!t1.$eq(0, t3))
          for (t1 = B._LinkedHashSetIterator$(t2, t2._collection$_modifications, B._instanceType(t2)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
            listener = t1._collection$_current;
            (listener == null ? t2._as(listener) : listener).call$0();
          }
      }
      t1 = _this._widget;
      _this.set$registrar(t1.registrar);
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      this._widget.toString;
    },
    addListener$1(_, listener) {
      this._widget.delegate.addListener$1(0, listener);
      this._selection_container$_listeners.add$1(0, listener);
    },
    removeListener$1(_, listener) {
      this._widget.delegate.removeListener$1(0, listener);
      this._selection_container$_listeners.remove$1(0, listener);
    },
    pushHandleLayers$2(startHandle, endHandle) {
      this._widget.delegate.pushHandleLayers$2(startHandle, endHandle);
    },
    dispatchSelectionEvent$1($event) {
      var result, result0,
        t1 = this._widget.delegate,
        selectionWillbeInProgress = !($event instanceof A.ClearSelectionEvent);
      if (!t1._selectionInProgress && selectionWillbeInProgress)
        C.JSArray_methods.sort$1(t1.selectables, t1.get$_compareScreenOrder());
      t1._selectionInProgress = selectionWillbeInProgress;
      t1._isHandlingSelectionEvent = true;
      result = B._Cell$named("result");
      switch ($event.type.index) {
        case 0:
        case 1:
          result.__late_helper$_value = t1.handleSelectionEdgeUpdate$1(type$.SelectionEdgeUpdateEvent._as($event));
          break;
        case 2:
          type$.ClearSelectionEvent._as($event);
          t1._selectableStartEdgeUpdateRecords.clear$0(0);
          t1._selectableEndEdgeUpdateRecords.clear$0(0);
          t1._currentDragEndRelatedToOrigin = t1._currentDragStartRelatedToOrigin = null;
          t1._selectionStartsInScrollable = false;
          result.__late_helper$_value = t1.super$MultiSelectableSelectionContainerDelegate$handleClearSelection($event);
          break;
        case 3:
          result0 = t1.super$MultiSelectableSelectionContainerDelegate$handleSelectAll(type$.SelectAllSelectionEvent._as($event));
          if (t1.currentSelectionStartIndex !== -1)
            t1._updateDragLocationsFromGeometries$0();
          result.__late_helper$_value = result0;
          break;
        case 4:
          type$.SelectWordSelectionEvent._as($event);
          t1._selectionStartsInScrollable = t1._globalPositionInScrollable$1($event.get$globalPosition());
          result0 = t1.super$MultiSelectableSelectionContainerDelegate$handleSelectWord($event);
          t1._updateDragLocationsFromGeometries$0();
          result.__late_helper$_value = result0;
          break;
      }
      t1._isHandlingSelectionEvent = false;
      t1._updateSelectionGeometry$0();
      return result._readLocal$0();
    },
    get$value(_) {
      var t1 = this._widget;
      return t1.delegate._selectionGeometry;
    },
    getTransformTo$1(_, ancestor) {
      return this._framework$_element.get$renderObject().getTransformTo$1(0, ancestor);
    },
    get$size(_) {
      var t1 = this._framework$_element.get$renderObject();
      t1.toString;
      t1 = type$.RenderBox._as(t1)._size;
      t1.toString;
      return t1;
    },
    dispose$0() {
      var t1 = this._widget.delegate;
      t1._selectionContainerContext = null;
      this._selection_container$_listeners.forEach$1(0, t1.get$removeListener(t1));
      this.super$__SelectionContainerState_State_Selectable_SelectionRegistrant$dispose();
    },
    build$1(context) {
      var t1 = this._widget,
        t2 = t1.delegate;
      return A.SelectionRegistrarScope$(t1.child, t2);
    },
    $isListenable: 1
  };
  A.SelectionRegistrarScope.prototype = {
    updateShouldNotify$1(oldWidget) {
      return oldWidget.registrar != this.registrar;
    }
  };
  A.SelectionContainerDelegate.prototype = {$isListenable: 1};
  A.__SelectionContainerState_State_Selectable.prototype = {};
  A.__SelectionContainerState_State_Selectable_SelectionRegistrant.prototype = {
    dispose$0() {
      this._selection$_removeSelectionRegistrarSubscription$0();
      this.super$State$dispose();
    }
  };
  A.SingleChildScrollView.prototype = {
    build$1(context) {
      var t4, effectivePrimary, scrollController, scrollable, _this = this, _null = null, t1 = {},
        t2 = _this.scrollDirection,
        t3 = A.getAxisDirectionFromAxisReverseAndDirectionality(context, t2, false),
        contents = _this.child;
      t1.contents = contents;
      t4 = _this.padding;
      if (t4 != null)
        t1.contents = new B.Padding(t4, contents, _null);
      effectivePrimary = A.PrimaryScrollController_shouldInherit(context, t2);
      scrollController = effectivePrimary ? B.PrimaryScrollController_of(context) : _null;
      scrollable = A.Scrollable$(t3, C.Clip_1, scrollController, C.DragStartBehavior_1, false, _this.physics, _null, _null, _null, new A.SingleChildScrollView_build_closure(t1, _this, t3));
      return effectivePrimary && scrollController != null ? A.PrimaryScrollController$none(scrollable) : scrollable;
    }
  };
  A._SingleChildViewport.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderSingleChildViewport(this.axisDirection, this.offset, this.clipBehavior, B.LayerHandle$(type$.ClipRectLayer), null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1;
      renderObject.set$axisDirection(this.axisDirection);
      renderObject.set$offset(0, this.offset);
      t1 = this.clipBehavior;
      if (t1 !== renderObject._single_child_scroll_view$_clipBehavior) {
        renderObject._single_child_scroll_view$_clipBehavior = t1;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
    },
    createElement$0(_) {
      return new A._SingleChildViewportElement(this, C._ElementLifecycle_0);
    }
  };
  A._SingleChildViewportElement.prototype = {};
  A._RenderSingleChildViewport.prototype = {
    set$axisDirection(value) {
      if (value === this._axisDirection)
        return;
      this._axisDirection = value;
      this.markNeedsLayout$0();
    },
    set$offset(_, value) {
      var _this = this,
        t1 = _this._single_child_scroll_view$_offset;
      if (value === t1)
        return;
      if (_this._node$_owner != null)
        t1.removeListener$1(0, _this.get$_hasScrolled());
      _this._single_child_scroll_view$_offset = value;
      if (_this._node$_owner != null)
        value.addListener$1(0, _this.get$_hasScrolled());
      _this.markNeedsLayout$0();
    },
    _hasScrolled$0() {
      this.markNeedsPaint$0();
      this.markNeedsSemanticsUpdate$0();
    },
    setupParentData$1(child) {
      if (!(child.parentData instanceof B.ParentData))
        child.parentData = new B.ParentData();
    },
    attach$1(owner) {
      this.super$__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin$attach(owner);
      this._single_child_scroll_view$_offset.addListener$1(0, this.get$_hasScrolled());
    },
    detach$0(_) {
      this._single_child_scroll_view$_offset.removeListener$1(0, this.get$_hasScrolled());
      this.super$__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    get$isRepaintBoundary() {
      return true;
    },
    get$_viewportExtent() {
      switch (B.axisDirectionToAxis(this._axisDirection).index) {
        case 0:
          return this._size._dx;
        case 1:
          return this._size._dy;
      }
    },
    get$_single_child_scroll_view$_maxScrollExtent() {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        return 0;
      switch (B.axisDirectionToAxis(_this._axisDirection).index) {
        case 0:
          return Math.max(0, t1._size._dx - _this._size._dx);
        case 1:
          return Math.max(0, t1._size._dy - _this._size._dy);
      }
    },
    _getInnerConstraints$1(constraints) {
      switch (B.axisDirectionToAxis(this._axisDirection).index) {
        case 0:
          return new B.BoxConstraints(0, 1 / 0, constraints.minHeight, constraints.maxHeight);
        case 1:
          return new B.BoxConstraints(constraints.minWidth, constraints.maxWidth, 0, 1 / 0);
      }
    },
    computeDryLayout$1(constraints) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        return new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      return constraints.constrain$1(t1.getDryLayout$1(this._getInnerConstraints$1(constraints)));
    },
    performLayout$0() {
      var _this = this,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this)),
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        _this._size = new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      else {
        t1.layout$2$parentUsesSize(_this._getInnerConstraints$1(constraints), true);
        t1 = _this.RenderObjectWithChildMixin__child._size;
        t1.toString;
        _this._size = constraints.constrain$1(t1);
      }
      _this._single_child_scroll_view$_offset.applyViewportDimension$1(_this.get$_viewportExtent());
      _this._single_child_scroll_view$_offset.applyContentDimensions$2(0, _this.get$_single_child_scroll_view$_maxScrollExtent());
    },
    _paintOffsetForPosition$1(position) {
      var _this = this;
      switch (_this._axisDirection.index) {
        case 0:
          return new B.Offset(0, position - _this.RenderObjectWithChildMixin__child._size._dy + _this._size._dy);
        case 2:
          return new B.Offset(0, -position);
        case 3:
          return new B.Offset(position - _this.RenderObjectWithChildMixin__child._size._dx + _this._size._dx, 0);
        case 1:
          return new B.Offset(-position, 0);
      }
    },
    _shouldClipAtPaintOffset$1(paintOffset) {
      var t1, t2, t3, t4, t5;
      switch (this._single_child_scroll_view$_clipBehavior.index) {
        case 0:
          return false;
        case 1:
        case 2:
        case 3:
          t1 = paintOffset._dx;
          if (!(t1 < 0)) {
            t2 = paintOffset._dy;
            if (!(t2 < 0)) {
              t3 = this.RenderObjectWithChildMixin__child._size;
              t4 = t3._dx;
              t5 = this._size;
              t1 = t1 + t4 > t5._dx || t2 + t3._dy > t5._dy;
            } else
              t1 = true;
          } else
            t1 = true;
          return t1;
      }
    },
    paint$2(context, offset) {
      var t1, t2, t3, t4, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = _this._single_child_scroll_view$_offset._pixels;
        t1.toString;
        t1 = _this._paintOffsetForPosition$1(t1);
        t2 = new A._RenderSingleChildViewport_paint_paintContents(_this, t1);
        t3 = _this._single_child_scroll_view$_clipRectLayer;
        if (_this._shouldClipAtPaintOffset$1(t1)) {
          t1 = _this.__RenderObject__needsCompositing_A;
          t1 === $ && B.throwUnnamedLateFieldNI();
          t4 = _this._size;
          t3.set$layer(0, context.pushClipRect$6$clipBehavior$oldLayer(t1, offset, new B.Rect(0, 0, 0 + t4._dx, 0 + t4._dy), t2, _this._single_child_scroll_view$_clipBehavior, t3._layer));
        } else {
          t3.set$layer(0, null);
          t2.call$2(context, offset);
        }
      }
    },
    dispose$0() {
      this._single_child_scroll_view$_clipRectLayer.set$layer(0, null);
      this.super$RenderObject$dispose();
    },
    applyPaintTransform$2(child, transform) {
      var t1 = this._single_child_scroll_view$_offset._pixels;
      t1.toString;
      t1 = this._paintOffsetForPosition$1(t1);
      transform.translate$2(0, t1._dx, t1._dy);
    },
    describeApproximatePaintClip$1(child) {
      var _this = this,
        t1 = _this._single_child_scroll_view$_offset._pixels;
      t1.toString;
      t1 = _this._paintOffsetForPosition$1(t1);
      if (_this._shouldClipAtPaintOffset$1(t1)) {
        t1 = _this._size;
        return new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
      }
      return null;
    },
    hitTestChildren$2$position(result, position) {
      var t1, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = _this._single_child_scroll_view$_offset._pixels;
        t1.toString;
        return result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderSingleChildViewport_hitTestChildren_closure(_this, position), _this._paintOffsetForPosition$1(t1), position);
      }
      return false;
    },
    getOffsetToReveal$3$rect(target, alignment, rect) {
      var t1, bounds, mainAxisExtent, t2, leadingScrollOffset, targetMainAxisExtent, targetOffset, _this = this;
      if (rect == null)
        rect = target.get$paintBounds();
      if (!(target instanceof B.RenderBox)) {
        t1 = _this._single_child_scroll_view$_offset._pixels;
        t1.toString;
        return new A.RevealedOffset(t1, rect);
      }
      bounds = B.MatrixUtils_transformRect(target.getTransformTo$1(0, _this.RenderObjectWithChildMixin__child), rect);
      t1 = _this.RenderObjectWithChildMixin__child._size;
      t1.toString;
      switch (_this._axisDirection.index) {
        case 0:
          mainAxisExtent = _this._size._dy;
          t2 = bounds.bottom;
          leadingScrollOffset = t1._dy - t2;
          targetMainAxisExtent = t2 - bounds.top;
          break;
        case 1:
          mainAxisExtent = _this._size._dx;
          leadingScrollOffset = bounds.left;
          targetMainAxisExtent = bounds.right - leadingScrollOffset;
          break;
        case 2:
          mainAxisExtent = _this._size._dy;
          leadingScrollOffset = bounds.top;
          targetMainAxisExtent = bounds.bottom - leadingScrollOffset;
          break;
        case 3:
          mainAxisExtent = _this._size._dx;
          t2 = bounds.right;
          leadingScrollOffset = t1._dx - t2;
          targetMainAxisExtent = t2 - bounds.left;
          break;
        default:
          leadingScrollOffset = null;
          targetMainAxisExtent = null;
          mainAxisExtent = null;
      }
      targetOffset = leadingScrollOffset - (mainAxisExtent - targetMainAxisExtent) * alignment;
      return new A.RevealedOffset(targetOffset, bounds.shift$1(_this._paintOffsetForPosition$1(targetOffset)));
    },
    showOnScreen$4$curve$descendant$duration$rect(curve, descendant, duration, rect) {
      var _this = this;
      if (!_this._single_child_scroll_view$_offset.physics.get$allowImplicitScrolling())
        return _this.super$RenderObject$showOnScreen(curve, descendant, duration, rect);
      _this.super$RenderObject$showOnScreen(curve, null, duration, A.RenderViewportBase_showInViewport(curve, descendant, duration, _this._single_child_scroll_view$_offset, rect, _this));
    },
    showOnScreen$0() {
      return this.showOnScreen$4$curve$descendant$duration$rect(C.Cubic_JUR, null, C.Duration_0, null);
    },
    showOnScreen$2$descendant$rect(descendant, rect) {
      return this.showOnScreen$4$curve$descendant$duration$rect(C.Cubic_JUR, descendant, C.Duration_0, rect);
    },
    showOnScreen$1$rect(rect) {
      return this.showOnScreen$4$curve$descendant$duration$rect(C.Cubic_JUR, null, C.Duration_0, rect);
    },
    showOnScreen$3$curve$duration$rect(curve, duration, rect) {
      return this.showOnScreen$4$curve$descendant$duration$rect(curve, null, duration, rect);
    },
    describeSemanticsClip$1(child) {
      var t1;
      switch (B.axisDirectionToAxis(this._axisDirection).index) {
        case 1:
          t1 = this._size;
          return new B.Rect(0, -250, 0 + t1._dx, 0 + t1._dy + 250);
        case 0:
          t1 = this._size;
          return new B.Rect(-250, 0, 0 + t1._dx + 250, 0 + t1._dy);
      }
    },
    $isRenderAbstractViewport: 1
  };
  A.__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1(owner) {
      var t1;
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    }
  };
  A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin.prototype = {};
  A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["~()", "bool(Object?)", "~(Selectable)", "~(DragDownDetails)", "~(DragStartDetails)", "~(DragUpdateDetails)", "~(DragEndDetails)", "~(PointerSignalEvent)", "~(PointerEvent)", "bool(ScrollMetricsNotification)", "int(Selectable,Selectable)", "_SingleChildViewport(BuildContext,ViewportOffset)", "~({curve:Curve,descendant:RenderObject?,duration:Duration,rect:Rect?})", "int(@,@)"]);
  A.SplayTreeMap_closure.prototype = {
    call$1(a) {
      return this.K._is(a);
    },
    $signature: 75
  };
  A.SplayTreeSet_closure.prototype = {
    call$1(v) {
      return this.E._is(v);
    },
    $signature: 75
  };
  A.SplayTreeSet__copyNode_copyChildren.prototype = {
    call$2(node, dest) {
      var left, right, newLeft, t2, newRight,
        t1 = this.$this.$ti._eval$1("_SplayTreeSetNode<1>");
      do {
        left = node._collection$_left;
        right = node._collection$_right;
        if (left != null) {
          newLeft = new A._SplayTreeSetNode(left.key, t1);
          dest._collection$_left = newLeft;
          this.call$2(left, newLeft);
        }
        t2 = right != null;
        if (t2) {
          newRight = new A._SplayTreeSetNode(right.key, t1);
          dest._collection$_right = newRight;
          dest = newRight;
          node = right;
        }
      } while (t2);
    },
    $signature() {
      return this.$this.$ti._bind$1(this.Node)._eval$1("~(1,_SplayTreeSetNode<2>)");
    }
  };
  A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin_dispose_closure.prototype = {
    call$2(property, listener) {
      if (!property._restoration0$_disposed)
        property.removeListener$1(0, listener);
    },
    $signature: 34
  };
  A.ScrollableState_setCanDrag_closure.prototype = {
    call$0() {
      var t1 = this.$this.__ScrollableState__configuration_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return B.VerticalDragGestureRecognizer$(null, t1.get$dragDevices());
    },
    $signature: 115
  };
  A.ScrollableState_setCanDrag_closure0.prototype = {
    call$1(instance) {
      var t2, t3, _null = null,
        t1 = this.$this;
      instance.onDown = t1.get$_handleDragDown();
      instance.onStart = t1.get$_scrollable$_handleDragStart();
      instance.onUpdate = t1.get$_scrollable$_handleDragUpdate();
      instance.onEnd = t1.get$_scrollable$_handleDragEnd();
      instance.onCancel = t1.get$_scrollable$_handleDragCancel();
      t2 = t1._physics;
      instance.minFlingDistance = t2 == null ? _null : t2.get$minFlingDistance();
      t2 = t1._physics;
      instance.minFlingVelocity = t2 == null ? _null : t2.get$minFlingVelocity();
      t2 = t1._physics;
      instance.maxFlingVelocity = t2 == null ? _null : t2.get$maxFlingVelocity();
      t2 = t1.__ScrollableState__configuration_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = t1._framework$_element;
      t3.toString;
      instance.velocityTrackerBuilder = t2.velocityTrackerBuilder$1(t3);
      instance.dragStartBehavior = t1._widget.dragStartBehavior;
      t1 = t1._mediaQueryData;
      instance.gestureSettings = t1 == null ? _null : t1.gestureSettings;
    },
    $signature: 116
  };
  A.ScrollableState_setCanDrag_closure1.prototype = {
    call$0() {
      var t1 = this.$this.__ScrollableState__configuration_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      return B.HorizontalDragGestureRecognizer$(null, t1.get$dragDevices());
    },
    $signature: 117
  };
  A.ScrollableState_setCanDrag_closure2.prototype = {
    call$1(instance) {
      var t2, t3, _null = null,
        t1 = this.$this;
      instance.onDown = t1.get$_handleDragDown();
      instance.onStart = t1.get$_scrollable$_handleDragStart();
      instance.onUpdate = t1.get$_scrollable$_handleDragUpdate();
      instance.onEnd = t1.get$_scrollable$_handleDragEnd();
      instance.onCancel = t1.get$_scrollable$_handleDragCancel();
      t2 = t1._physics;
      instance.minFlingDistance = t2 == null ? _null : t2.get$minFlingDistance();
      t2 = t1._physics;
      instance.minFlingVelocity = t2 == null ? _null : t2.get$minFlingVelocity();
      t2 = t1._physics;
      instance.maxFlingVelocity = t2 == null ? _null : t2.get$maxFlingVelocity();
      t2 = t1.__ScrollableState__configuration_A;
      t2 === $ && B.throwUnnamedLateFieldNI();
      t3 = t1._framework$_element;
      t3.toString;
      instance.velocityTrackerBuilder = t2.velocityTrackerBuilder$1(t3);
      instance.dragStartBehavior = t1._widget.dragStartBehavior;
      t1 = t1._mediaQueryData;
      instance.gestureSettings = t1 == null ? _null : t1.gestureSettings;
    },
    $signature: 118
  };
  A._ScrollableSelectionContainerDelegate__scheduleLayoutChange_closure.prototype = {
    call$1(timeStamp) {
      var t1 = this.$this;
      if (!t1._scheduledLayoutChange)
        return;
      t1._scheduledLayoutChange = false;
      t1._updateSelectionGeometry$0();
    },
    $signature: 2
  };
  A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure.prototype = {
    call$2(key, value) {
      return !this.selectableSet.contains$1(0, key);
    },
    $signature: 137
  };
  A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure0.prototype = {
    call$2(key, value) {
      return !this.selectableSet.contains$1(0, key);
    },
    $signature: 137
  };
  A.MultiSelectableSelectionContainerDelegate__scheduleSelectableUpdate_closure.prototype = {
    call$1(timeStamp) {
      var t1 = this.$this;
      if (!t1._scheduledSelectableUpdate)
        return;
      t1._scheduledSelectableUpdate = false;
      if (t1._additions._collection$_length !== 0)
        t1._flushAdditions$0();
      t1.didChangeSelectables$0();
    },
    $signature: 2
  };
  A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure.prototype = {
    call$1(target) {
      return target !== this.$this.selectables[this.index];
    },
    $signature: 386
  };
  A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure0.prototype = {
    call$1(target) {
      return this.$this.dispatchSelectionEventToChild$2(target, D.ClearSelectionEvent_SelectionEventType_2);
    },
    $signature: 387
  };
  A.SingleChildScrollView_build_closure.prototype = {
    call$2(context, offset) {
      return new A._SingleChildViewport(this.axisDirection, offset, C.Clip_1, this._box_0.contents, null);
    },
    $signature: typesOffset + 11
  };
  A._RenderSingleChildViewport_paint_paintContents.prototype = {
    call$2(context, offset) {
      var t1 = this.$this.RenderObjectWithChildMixin__child;
      t1.toString;
      context.paintChild$2(t1, offset.$add(0, this.paintOffset));
    },
    $signature: 17
  };
  A._RenderSingleChildViewport_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, transformed);
    },
    $signature: 10
  };
  (function aliases() {
    var _ = A._ScrollableState_State_TickerProviderStateMixin.prototype;
    _.super$_ScrollableState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin.prototype;
    _.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$didUpdateWidget = _.didUpdateWidget$1;
    _.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$didChangeDependencies = _.didChangeDependencies$0;
    _.super$_ScrollableState_State_TickerProviderStateMixin_RestorationMixin$dispose = _.dispose$0;
    _ = A.MultiSelectableSelectionContainerDelegate.prototype;
    _.super$MultiSelectableSelectionContainerDelegate$didChangeSelectables = _.didChangeSelectables$0;
    _.super$MultiSelectableSelectionContainerDelegate$handleSelectAll = _.handleSelectAll$1;
    _.super$MultiSelectableSelectionContainerDelegate$handleSelectWord = _.handleSelectWord$1;
    _.super$MultiSelectableSelectionContainerDelegate$handleClearSelection = _.handleClearSelection$1;
    _.super$MultiSelectableSelectionContainerDelegate$handleSelectionEdgeUpdate = _.handleSelectionEdgeUpdate$1;
    _.super$MultiSelectableSelectionContainerDelegate$dispose = _.dispose$0;
    _.super$MultiSelectableSelectionContainerDelegate$dispatchSelectionEventToChild = _.dispatchSelectionEventToChild$2;
    _ = A.__SelectionContainerState_State_Selectable_SelectionRegistrant.prototype;
    _.super$__SelectionContainerState_State_Selectable_SelectionRegistrant$dispose = _.dispose$0;
    _ = A.__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin.prototype;
    _.super$__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin$attach = _.attach$1;
    _.super$__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin$detach = _.detach$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance = hunkHelpers.installInstanceTearOff;
    _static_2(A, "collection___dynamicCompare$closure", "_dynamicCompare", 13);
    _instance_1_i(A.IterableMixin.prototype, "get$contains", "contains$1", 1);
    _instance_1_i(A.SplayTreeSet.prototype, "get$contains", "contains$1", 1);
    _instance_0_u(A.SelectionRegistrant.prototype, "get$_selection$_updateSelectionRegistrarSubscription", "_selection$_updateSelectionRegistrarSubscription$0", 0);
    var _;
    _instance_1_u(_ = A.ScrollableState.prototype, "get$_handleDragDown", "_handleDragDown$1", 3);
    _instance_1_u(_, "get$_scrollable$_handleDragStart", "_scrollable$_handleDragStart$1", 4);
    _instance_1_u(_, "get$_scrollable$_handleDragUpdate", "_scrollable$_handleDragUpdate$1", 5);
    _instance_1_u(_, "get$_scrollable$_handleDragEnd", "_scrollable$_handleDragEnd$1", 6);
    _instance_0_u(_, "get$_scrollable$_handleDragCancel", "_scrollable$_handleDragCancel$0", 0);
    _instance_0_u(_, "get$_disposeHold", "_disposeHold$0", 0);
    _instance_0_u(_, "get$_disposeDrag", "_disposeDrag$0", 0);
    _instance_1_u(_, "get$_receivedPointerSignal", "_receivedPointerSignal$1", 7);
    _instance_1_u(_, "get$_handlePointerScroll", "_handlePointerScroll$1", 8);
    _instance_1_u(_, "get$_scrollable$_handleScrollMetricsNotification", "_scrollable$_handleScrollMetricsNotification$1", 9);
    _instance_0_u(A._ScrollableSelectionContainerDelegate.prototype, "get$_scheduleLayoutChange", "_scheduleLayoutChange$0", 0);
    _instance_1_i(_ = A.MultiSelectableSelectionContainerDelegate.prototype, "get$add", "add$1", 2);
    _instance_1_i(_, "get$remove", "remove$1", 2);
    _instance_2_u(_, "get$_compareScreenOrder", "_compareScreenOrder$2", 10);
    _instance_0_u(_, "get$_handleSelectableGeometryChange", "_handleSelectableGeometryChange$0", 0);
    _instance_0_u(_ = A._RenderSingleChildViewport.prototype, "get$_hasScrolled", "_hasScrolled$0", 0);
    _instance(_, "get$showOnScreen", 0, 0, null, ["call$4$curve$descendant$duration$rect", "call$0", "call$2$descendant$rect", "call$1$rect", "call$3$curve$duration$rect"], ["showOnScreen$4$curve$descendant$duration$rect", "showOnScreen$0", "showOnScreen$2$descendant$rect", "showOnScreen$1$rect", "showOnScreen$3$curve$duration$rect"], 12, 0, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Object, [A.IterableMixin, A._SplayTreeNode, A._SplayTree, A._SplayTreeIterator, A.SelectionRegistrant, A.SelectionEvent, A.RevealedOffset, A.ViewportElementMixin, A.EdgeDraggingAutoScroller, A.SelectionContainerDelegate, A.ScrollableDetails]);
    _inheritMany(A._SplayTreeNode, [A._SplayTreeSetNode, A._SplayTreeMapNode]);
    _inheritMany(A._SplayTree, [A._SplayTreeMap__SplayTree_MapMixin, A._SplayTreeSet__SplayTree_IterableMixin]);
    _inherit(A.SplayTreeMap, A._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(B.Closure, [A.SplayTreeMap_closure, A.SplayTreeSet_closure, A.ScrollableState_setCanDrag_closure0, A.ScrollableState_setCanDrag_closure2, A._ScrollableSelectionContainerDelegate__scheduleLayoutChange_closure, A.MultiSelectableSelectionContainerDelegate__scheduleSelectableUpdate_closure, A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure, A.MultiSelectableSelectionContainerDelegate_handleSelectWord_closure0]);
    _inheritMany(B.EfficientLengthIterable, [A._SplayTreeKeyIterable, A._SplayTreeValueIterable, A._SplayTreeMapEntryIterable]);
    _inheritMany(A._SplayTreeIterator, [A._SplayTreeKeyIterator, A._SplayTreeValueIterator, A._SplayTreeMapEntryIterator]);
    _inherit(A._SplayTreeSet__SplayTree_IterableMixin_SetMixin, A._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(A.SplayTreeSet, A._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inheritMany(B.Closure2Args, [A.SplayTreeSet__copyNode_copyChildren, A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin_dispose_closure, A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure, A._ScrollableSelectionContainerDelegate_didChangeSelectables_closure0, A.SingleChildScrollView_build_closure, A._RenderSingleChildViewport_paint_paintContents, A._RenderSingleChildViewport_hitTestChildren_closure]);
    _inheritMany(A.SelectionEvent, [A.ClearSelectionEvent, A.SelectionEdgeUpdateEvent]);
    _inherit(A.ScrollViewKeyboardDismissBehavior, B._Enum);
    _inheritMany(B.StatefulWidget, [A.Scrollable, A._ScrollableSelectionHandler, A.SelectionContainer]);
    _inheritMany(B.InheritedWidget, [A._ScrollableScope, A.SelectionRegistrarScope]);
    _inheritMany(B.State, [A._ScrollableState_State_TickerProviderStateMixin, A._ScrollableSelectionHandlerState, A.__SelectionContainerState_State_Selectable]);
    _inherit(A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin, A._ScrollableState_State_TickerProviderStateMixin);
    _inherit(A.ScrollableState, A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin);
    _inheritMany(B.Closure0Args, [A.ScrollableState_setCanDrag_closure, A.ScrollableState_setCanDrag_closure1]);
    _inherit(A._MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier, A.SelectionContainerDelegate);
    _inherit(A.MultiSelectableSelectionContainerDelegate, A._MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier);
    _inherit(A._ScrollableSelectionContainerDelegate, A.MultiSelectableSelectionContainerDelegate);
    _inheritMany(B.SingleChildRenderObjectWidget, [A._ScrollSemantics, A._SingleChildViewport]);
    _inherit(A._RenderScrollSemantics, B.RenderProxyBox);
    _inherit(A._RestorableScrollOffset, B.RestorableValue);
    _inherit(A.__SelectionContainerState_State_Selectable_SelectionRegistrant, A.__SelectionContainerState_State_Selectable);
    _inherit(A._SelectionContainerState, A.__SelectionContainerState_State_Selectable_SelectionRegistrant);
    _inherit(A.SingleChildScrollView, B.StatelessWidget);
    _inherit(A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin, B.SingleChildRenderObjectElement);
    _inherit(A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin, A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin);
    _inherit(A._SingleChildViewportElement, A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin);
    _inherit(A.__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin, B.RenderBox);
    _inherit(A._RenderSingleChildViewport, A.__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin);
    _mixin(A._SplayTreeMap__SplayTree_MapMixin, B.MapMixin);
    _mixin(A._SplayTreeSet__SplayTree_IterableMixin, A.IterableMixin);
    _mixin(A._SplayTreeSet__SplayTree_IterableMixin_SetMixin, B.SetMixin);
    _mixinHard(A._ScrollableState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A._ScrollableState_State_TickerProviderStateMixin_RestorationMixin, B.RestorationMixin);
    _mixin(A._MultiSelectableSelectionContainerDelegate_SelectionContainerDelegate_ChangeNotifier, B.ChangeNotifier);
    _mixin(A.__SelectionContainerState_State_Selectable, B.Selectable);
    _mixinHard(A.__SelectionContainerState_State_Selectable_SelectionRegistrant, A.SelectionRegistrant);
    _mixinHard(A.__RenderSingleChildViewport_RenderBox_RenderObjectWithChildMixin, B.RenderObjectWithChildMixin);
    _mixin(A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin, B.NotifiableElementMixin);
    _mixin(A.__SingleChildViewportElement_SingleChildRenderObjectElement_NotifiableElementMixin_ViewportElementMixin, A.ViewportElementMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"_SplayTreeMapNode":{"MapEntry":["1","2"]},"SplayTreeMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.V":"2","MapMixin.K":"1"},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_SplayTreeValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_SplayTreeMapEntryIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"],"Iterable.E":"MapEntry<1,2>"},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"_SplayTreeIterator.T":"1"},"_SplayTreeValueIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","2"],"_SplayTreeIterator.T":"2"},"_SplayTreeMapEntryIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","MapEntry<1,2>"],"_SplayTreeIterator.T":"MapEntry<1,2>"},"SplayTreeSet":{"SetMixin":["1"],"Set":["1"],"IterableMixin":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ScrollViewKeyboardDismissBehavior":{"Enum":[]},"Scrollable":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScrollableSelectionHandler":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScrollableScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"ScrollableState":{"State":["Scrollable"]},"_ScrollableSelectionHandlerState":{"State":["_ScrollableSelectionHandler"]},"_ScrollableSelectionContainerDelegate":{"Listenable":[]},"_ScrollSemantics":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderScrollSemantics":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_RestorableScrollOffset":{"RestorableProperty":["double?"],"Listenable":[],"RestorableValue.T":"double?"},"MultiSelectableSelectionContainerDelegate":{"Listenable":[]},"SelectionContainer":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SelectionContainerState":{"Selectable":[],"State":["SelectionContainer"],"Listenable":[]},"SelectionRegistrarScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"SelectionContainerDelegate":{"Listenable":[]},"_SingleChildViewport":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"SingleChildScrollView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SingleChildViewportElement":{"RenderObjectElement":[],"Element0":[],"DiagnosticableTree":[],"BuildContext":[]},"_RenderSingleChildViewport":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderAbstractViewport":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]}}'));
  B._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"_SplayTreeNode":2,"_SplayTree":2,"_SplayTreeMap__SplayTree_MapMixin":2,"_SplayTreeSet__SplayTree_IterableMixin":1,"_SplayTreeSet__SplayTree_IterableMixin_SetMixin":1}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      BoxConstraints: findType("BoxConstraints"),
      ClearSelectionEvent: findType("ClearSelectionEvent"),
      ClipRectLayer: findType("ClipRectLayer"),
      ContainerLayer: findType("ContainerLayer0"),
      Directionality: findType("Directionality"),
      GestureRecognizerFactoryWithHandlers_HorizontalDragGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<HorizontalDragGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_VerticalDragGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<VerticalDragGestureRecognizer>"),
      GestureRecognizerFactory_GestureRecognizer: findType("GestureRecognizerFactory<GestureRecognizer>"),
      JSArray_Selectable: findType("JSArray<Selectable>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      LabeledGlobalKey_RawGestureDetectorState: findType("LabeledGlobalKey<RawGestureDetectorState>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      NotificationListener_ScrollMetricsNotification: findType("NotificationListener<ScrollMetricsNotification>"),
      PointerScrollEvent: findType("PointerScrollEvent"),
      PrimaryScrollController: findType("PrimaryScrollController"),
      RenderBox: findType("RenderBox"),
      RenderIgnorePointer: findType("RenderIgnorePointer"),
      RenderObject: findType("RenderObject"),
      RenderSemanticsGestureHandler: findType("RenderSemanticsGestureHandler"),
      RestorableProperty_nullable_Object: findType("RestorableProperty<Object?>"),
      SelectAllSelectionEvent: findType("SelectAllSelectionEvent"),
      SelectWordSelectionEvent: findType("SelectWordSelectionEvent"),
      Selectable: findType("Selectable"),
      SelectionEdgeUpdateEvent: findType("SelectionEdgeUpdateEvent"),
      Type: findType("Type"),
      ViewportNotificationMixin: findType("ViewportNotificationMixin"),
      double: findType("double"),
      int: findType("int"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    D.ClearSelectionEvent_SelectionEventType_2 = new A.ClearSelectionEvent(C.SelectionEventType_2);
    D.List_empty14 = B._setArrayType(makeConstList([]), type$.JSArray_Selectable);
    D.Offset_YZQ = new B.Offset(1 / 0, 1 / 0);
    D.ScrollViewKeyboardDismissBehavior_0 = new A.ScrollViewKeyboardDismissBehavior(0, "manual");
    D.ScrollViewKeyboardDismissBehavior_1 = new A.ScrollViewKeyboardDismissBehavior(1, "onDrag");
    D.SelectionGeometry_wEo0 = new B.SelectionGeometry(null, null, C.SelectionStatus_2, false);
    D.SelectionResult_3 = new B.SelectionResult(3, "pending");
    D.SemanticsTag_FIw = new B.SemanticsTag("RenderViewport.twoPane");
    D.SemanticsTag_bQQ = new B.SemanticsTag("RenderViewport.excludeFromScrolling");
    D.List_empty26 = B._setArrayType(makeConstList([]), B.findType("JSArray<TargetPlatform>"));
    D.Map_empty9 = new B.ConstantStringMap(0, {}, D.List_empty26, B.findType("ConstantStringMap<TargetPlatform,Null>"));
    D.Set_empty = new B._UnmodifiableSet(D.Map_empty9, B.findType("_UnmodifiableSet<TargetPlatform>"));
  })();
};

$__dart_deferred_initializers__["+PqsPzVhQvYlgE1AC+n5y4fhhXk="] = $__dart_deferred_initializers__.current
