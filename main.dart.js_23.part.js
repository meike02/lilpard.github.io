// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, deferred-serialization, csp), the Dart to JavaScript compiler version: 2.18.0-271.4.beta.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A = {RenderSliverFillViewport: function RenderSliverFillViewport(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._sliver_fill0$_viewportFraction = t0;
      _._childManager = t1;
      _._keepAliveBucket = t2;
      _.__RenderSliverMultiBoxAdaptor__debugDanglingKeepAlives_A = $;
      _._debugChildIntegrityEnabled = true;
      _.ContainerRenderObjectMixin__childCount = t3;
      _.ContainerRenderObjectMixin__firstChild = t4;
      _.ContainerRenderObjectMixin__lastChild = t5;
      _._geometry = null;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    PageController$(initialPage, keepPage) {
      return new A.PageController(initialPage, true, B._setArrayType([], type$.JSArray_ScrollPosition), $.$get$ChangeNotifier__emptyListeners());
    },
    PageView$(children, controller, physics) {
      return new A.PageView(controller, physics, new A.SliverChildListDelegate(children, B.LinkedHashMap_LinkedHashMap$_literal([null, 0], type$.nullable_Key, type$.int)), null);
    },
    PageController: function PageController(t0, t1, t2, t3) {
      var _ = this;
      _.initialPage = t0;
      _.keepPage = t1;
      _._positions = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    PageMetrics: function PageMetrics(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.viewportFraction = t0;
      _._minScrollExtent = t1;
      _._maxScrollExtent = t2;
      _._scroll_metrics$_pixels = t3;
      _._scroll_metrics$_viewportDimension = t4;
      _.axisDirection = t5;
    },
    _PagePosition: function _PagePosition(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._pageToUseOnStartup = t0;
      _._cachedPage = null;
      _._viewportFraction = t1;
      _._heldPreviousVelocity = 0;
      _._userScrollDirection = t2;
      _._currentDrag = null;
      _.physics = t3;
      _.context = t4;
      _.keepScrollOffset = t5;
      _.debugLabel = t6;
      _._scroll_position$_maxScrollExtent = _._scroll_position$_minScrollExtent = null;
      _._impliedVelocity = 0;
      _._viewportDimension = _._pixels = null;
      _._haveDimensions = false;
      _._didChangeViewportDimensionOrReceiveCorrection = true;
      _._pendingDimensions = false;
      _._scroll_position$_lastMetrics = null;
      _._haveScheduledUpdateNotification = false;
      _._semanticActions = _._lastAxis = null;
      _.isScrollingNotifier = t7;
      _._activity = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t8;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__debugDisposed = false;
    },
    _ForceImplicitScrollPhysics: function _ForceImplicitScrollPhysics(t0, t1) {
      this.allowImplicitScrolling = t0;
      this.parent = t1;
    },
    PageScrollPhysics: function PageScrollPhysics(t0) {
      this.parent = t0;
    },
    PageView: function PageView(t0, t1, t2, t3) {
      var _ = this;
      _.controller = t0;
      _.physics = t1;
      _.childrenDelegate = t2;
      _.key = t3;
    },
    _PageViewState: function _PageViewState(t0) {
      var _ = this;
      _._lastReportedPage = 0;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._framework$_element = null;
    },
    _PageViewState_build_closure: function _PageViewState_build_closure(t0) {
      this.$this = t0;
    },
    _PageViewState_build_closure0: function _PageViewState_build_closure0(t0, t1) {
      this.$this = t0;
      this.axisDirection = t1;
    },
    SliverChildListDelegate: function SliverChildListDelegate(t0, t1) {
      this.children = t0;
      this._keyToIndex = t1;
    },
    SliverFillViewport: function SliverFillViewport(t0, t1, t2, t3) {
      var _ = this;
      _.viewportFraction = t0;
      _.padEnds = t1;
      _.delegate = t2;
      _.key = t3;
    },
    _SliverFillViewportRenderObjectWidget: function _SliverFillViewportRenderObjectWidget(t0, t1, t2) {
      this.viewportFraction = t0;
      this.delegate = t1;
      this.key = t2;
    },
    _SliverFractionalPadding: function _SliverFractionalPadding(t0, t1, t2) {
      this.viewportFraction = t0;
      this.child = t1;
      this.key = t2;
    },
    _RenderSliverFractionalPadding: function _RenderSliverFractionalPadding(t0, t1, t2) {
      var _ = this;
      _._lastResolvedConstraints = null;
      _._sliver_fill$_viewportFraction = t0;
      _._sliver_fill$_resolvedPadding = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._geometry = null;
      _._object$_debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    }
  },
  B, D, E, F, J, C, G;
  A = hunkHelpers.updateHolder(holdersList[14], A);
  B = holdersList[0];
  D = holdersList[2];
  E = holdersList[23];
  F = holdersList[31];
  J = holdersList[1];
  C = holdersList[21];
  G = holdersList[32];
  A.RenderSliverFillViewport.prototype = {
    get$itemExtent() {
      return type$.SliverConstraints._as(B.RenderObject.prototype.get$constraints.call(this)).viewportMainAxisExtent * this._sliver_fill0$_viewportFraction;
    },
    set$viewportFraction(value) {
      if (this._sliver_fill0$_viewportFraction === value)
        return;
      this._sliver_fill0$_viewportFraction = value;
      this.markNeedsLayout$0();
    }
  };
  A.PageController.prototype = {
    animateToPage$3$curve$duration(page, curve, duration) {
      var position = type$._PagePosition._as(D.JSArray_methods.get$single(this._positions));
      if (position._cachedPage != null) {
        position._cachedPage = page;
        return B.Future_Future$value(null, type$.void);
      }
      return position.animateTo$3$curve$duration(position.getPixelsFromPage$1(page), curve, duration);
    },
    previousPage$2$curve$duration(curve, duration) {
      var position = type$._PagePosition._as(D.JSArray_methods.get$single(this._positions)),
        t1 = position.get$page(position);
      t1.toString;
      return this.animateToPage$3$curve$duration(D.JSNumber_methods.round$0(t1) - 1, curve, duration);
    },
    createScrollPosition$3(physics, context, oldPosition) {
      var _null = null,
        t1 = $.$get$ChangeNotifier__emptyListeners();
      t1 = new A._PagePosition(this.initialPage, 1, D.ScrollDirection_0, physics, context, true, _null, new B.ValueNotifier(false, t1, type$.ValueNotifier_bool), t1);
      t1.ScrollPosition$5$context$debugLabel$keepScrollOffset$oldPosition$physics(context, _null, true, oldPosition, physics);
      t1.ScrollPositionWithSingleContext$6$context$debugLabel$initialPixels$keepScrollOffset$oldPosition$physics(context, _null, _null, true, oldPosition, physics);
      return t1;
    },
    attach$1(position) {
      this.super$ScrollController$attach(position);
      type$._PagePosition._as(position).set$viewportFraction(1);
    }
  };
  A.PageMetrics.prototype = {};
  A._PagePosition.prototype = {
    ensureVisible$6$alignment$alignmentPolicy$curve$duration$targetRenderObject(object, alignment, alignmentPolicy, curve, duration, targetRenderObject) {
      return this.super$ScrollPosition$ensureVisible(object, alignment, alignmentPolicy, curve, duration, null);
    },
    set$viewportFraction(value) {
      var oldPage, _this = this;
      if (_this._viewportFraction === value)
        return;
      oldPage = _this.get$page(_this);
      _this._viewportFraction = value;
      if (oldPage != null)
        _this.forcePixels$1(_this.getPixelsFromPage$1(oldPage));
    },
    get$_initialPageOffset() {
      var t1 = this._viewportDimension;
      t1.toString;
      return Math.max(0, t1 * (this._viewportFraction - 1) / 2);
    },
    getPageFromPixels$2(pixels, viewportDimension) {
      var actual = Math.max(0, pixels - this.get$_initialPageOffset()) / (viewportDimension * this._viewportFraction),
        round = D.JSNumber_methods.roundToDouble$0(actual);
      if (Math.abs(actual - round) < 1e-10)
        return round;
      return actual;
    },
    getPixelsFromPage$1(page) {
      var t1 = this._viewportDimension;
      t1.toString;
      return page * t1 * this._viewportFraction + this.get$_initialPageOffset();
    },
    get$page(_) {
      var t2, t3, _this = this,
        t1 = _this._pixels;
      if (t1 != null)
        t2 = !(_this._scroll_position$_minScrollExtent != null && _this._scroll_position$_maxScrollExtent != null);
      else
        t2 = true;
      if (t2)
        t1 = null;
      else {
        t2 = _this._cachedPage;
        if (t2 == null) {
          t1.toString;
          t2 = _this._scroll_position$_minScrollExtent;
          t2.toString;
          t3 = _this._scroll_position$_maxScrollExtent;
          t3.toString;
          t3 = B.clampDouble(t1, t2, t3);
          t2 = _this._viewportDimension;
          t2.toString;
          t2 = _this.getPageFromPixels$2(t3, t2);
          t1 = t2;
        } else
          t1 = t2;
      }
      return t1;
    },
    saveScrollOffset$0() {
      var t3, t4, _this = this,
        t1 = _this.context,
        t2 = t1._framework$_element;
      t2.toString;
      t2 = B.PageStorage_of(t2);
      if (t2 != null) {
        t1 = t1._framework$_element;
        t1.toString;
        t3 = _this._cachedPage;
        if (t3 == null) {
          t3 = _this._pixels;
          t3.toString;
          t4 = _this._viewportDimension;
          t4.toString;
          t4 = _this.getPageFromPixels$2(t3, t4);
          t3 = t4;
        }
        t2.writeState$2(t1, t3);
      }
    },
    restoreScrollOffset$0() {
      var t1, t2, value;
      if (this._pixels == null) {
        t1 = this.context;
        t2 = t1._framework$_element;
        t2.toString;
        t2 = B.PageStorage_of(t2);
        if (t2 == null)
          value = null;
        else {
          t1 = t1._framework$_element;
          t1.toString;
          value = t2.readState$1(t1);
        }
        if (value != null)
          this._pageToUseOnStartup = value;
      }
    },
    saveOffset$0() {
      var t2, _this = this,
        t1 = _this._cachedPage;
      if (t1 == null) {
        t1 = _this._pixels;
        t1.toString;
        t2 = _this._viewportDimension;
        t2.toString;
        t2 = _this.getPageFromPixels$2(t1, t2);
        t1 = t2;
      }
      _this.context._persistedScrollOffset.set$value(0, t1);
      t1 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__restorationManager_A;
      t1 === $ && B.throwUnnamedLateFieldNI();
      t1.flushData$0();
    },
    restoreOffset$2$initialRestore(offset, initialRestore) {
      if (initialRestore)
        this._pageToUseOnStartup = offset;
      else
        this.jumpTo$1(this.getPixelsFromPage$1(offset));
    },
    applyViewportDimension$1(viewportDimension) {
      var oldPixels, page, t1, newPixels, _this = this,
        oldViewportDimensions = _this._viewportDimension;
      oldViewportDimensions = oldViewportDimensions != null ? oldViewportDimensions : null;
      if (viewportDimension === oldViewportDimensions)
        return true;
      _this.super$ScrollPosition$applyViewportDimension(viewportDimension);
      oldPixels = _this._pixels;
      oldPixels = oldPixels != null ? oldPixels : null;
      if (oldPixels == null)
        page = _this._pageToUseOnStartup;
      else if (oldViewportDimensions === 0) {
        t1 = _this._cachedPage;
        t1.toString;
        page = t1;
      } else {
        oldViewportDimensions.toString;
        page = _this.getPageFromPixels$2(oldPixels, oldViewportDimensions);
      }
      newPixels = _this.getPixelsFromPage$1(page);
      _this._cachedPage = viewportDimension === 0 ? page : null;
      if (newPixels !== oldPixels) {
        _this._pixels = newPixels;
        return false;
      }
      return true;
    },
    absorb$1(other) {
      var t1;
      this.super$ScrollPositionWithSingleContext$absorb(other);
      if (!(other instanceof A._PagePosition))
        return;
      t1 = other._cachedPage;
      if (t1 != null)
        this._cachedPage = t1;
    },
    applyContentDimensions$2(minScrollExtent, maxScrollExtent) {
      var newMinScrollExtent = minScrollExtent + this.get$_initialPageOffset();
      return this.super$ScrollPosition$applyContentDimensions(newMinScrollExtent, Math.max(newMinScrollExtent, maxScrollExtent - this.get$_initialPageOffset()));
    },
    copyWith$0() {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this._scroll_position$_minScrollExtent;
      if (t1 != null && _this._scroll_position$_maxScrollExtent != null)
        t1.toString;
      else
        t1 = _null;
      if (_this._scroll_position$_minScrollExtent != null && _this._scroll_position$_maxScrollExtent != null) {
        t2 = _this._scroll_position$_maxScrollExtent;
        t2.toString;
      } else
        t2 = _null;
      t3 = _this._pixels;
      t3 = t3 != null ? t3 : _null;
      t4 = _this._viewportDimension;
      t4 = t4 != null ? t4 : _null;
      t5 = _this.context._widget.axisDirection;
      t6 = _this._viewportFraction;
      return new A.PageMetrics(t6, t1, t2, t3, t4, t5);
    }
  };
  A._ForceImplicitScrollPhysics.prototype = {
    applyTo$1(ancestor) {
      return new A._ForceImplicitScrollPhysics(false, this.buildParent$1(ancestor));
    },
    get$allowImplicitScrolling() {
      return this.allowImplicitScrolling;
    }
  };
  A.PageScrollPhysics.prototype = {
    applyTo$1(ancestor) {
      return new A.PageScrollPhysics(this.buildParent$1(ancestor));
    },
    _getPage$1(position) {
      var t1, t2;
      if (position instanceof A._PagePosition) {
        t1 = position.get$page(position);
        t1.toString;
        return t1;
      }
      t1 = position._pixels;
      t1.toString;
      t2 = position._viewportDimension;
      t2.toString;
      return t1 / t2;
    },
    _getPixels$2(position, page) {
      var t1;
      if (position instanceof A._PagePosition)
        return position.getPixelsFromPage$1(page);
      t1 = position._viewportDimension;
      t1.toString;
      return page * t1;
    },
    createBallisticSimulation$2(position, velocity) {
      var t1, t2, tolerance, page, target, _this = this;
      if (velocity <= 0) {
        t1 = position._pixels;
        t1.toString;
        t2 = position._scroll_position$_minScrollExtent;
        t2.toString;
        t2 = t1 <= t2;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        if (velocity >= 0) {
          t1 = position._pixels;
          t1.toString;
          t2 = position._scroll_position$_maxScrollExtent;
          t2.toString;
          t2 = t1 >= t2;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return _this.super$ScrollPhysics$createBallisticSimulation(position, velocity);
      tolerance = _this.get$tolerance();
      page = _this._getPage$1(position);
      t1 = tolerance.velocity;
      if (velocity < -t1)
        page -= 0.5;
      else if (velocity > t1)
        page += 0.5;
      target = _this._getPixels$2(position, D.JSNumber_methods.roundToDouble$0(page));
      t1 = position._pixels;
      t1.toString;
      if (target !== t1) {
        t1 = _this.get$spring();
        t2 = position._pixels;
        t2.toString;
        return new B.ScrollSpringSimulation(target, B._SpringSolution__SpringSolution(t1, t2 - target, velocity), tolerance);
      }
      return null;
    },
    get$allowImplicitScrolling() {
      return false;
    }
  };
  A.PageView.prototype = {
    createState$0() {
      return new A._PageViewState(D._StateLifecycle_0);
    }
  };
  A._PageViewState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._lastReportedPage = this._widget.controller.initialPage;
    },
    _getDirection$1(context) {
      var t1, axisDirection;
      this._widget.toString;
      switch (0) {
        case 0:
          t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
          t1.toString;
          axisDirection = E.textDirectionToAxisDirection(t1.textDirection);
          this._widget.toString;
          return axisDirection;
      }
    },
    build$1(context) {
      var t2, t3, _this = this, _null = null,
        axisDirection = _this._getDirection$1(context),
        t1 = _this._widget.physics;
      t1 = new A.PageScrollPhysics(F.PageScrollPhysics_null.buildParent$1(t1));
      t1 = new A._ForceImplicitScrollPhysics(false, _null).buildParent$1(t1);
      t2 = _this._widget.controller;
      t3 = B.ScrollConfiguration_of(context).copyWith$1$scrollbars(false);
      return new B.NotificationListener(new A._PageViewState_build_closure(_this), E.Scrollable$(axisDirection, D.Clip_1, t2, D.DragStartBehavior_1, false, new A._ForceImplicitScrollPhysics(false, t1), _null, t3, _null, new A._PageViewState_build_closure0(_this, axisDirection)), _null, type$.NotificationListener_ScrollNotification);
    }
  };
  A.SliverChildListDelegate.prototype = {
    _findChildIndex$1(key) {
      var t2, t3, index, _null = null,
        t1 = this._keyToIndex;
      if (!t1.containsKey$1(0, key)) {
        t2 = t1.$index(0, _null);
        t2.toString;
        for (t3 = this.children, index = t2; index < 2;) {
          t2 = t3[index].key;
          if (t2 != null)
            t1.$indexSet(0, t2, index);
          if (J.$eq$(t2, key)) {
            t1.$indexSet(0, _null, index + 1);
            return index;
          }
          ++index;
        }
        t1.$indexSet(0, _null, index);
      } else
        return t1.$index(0, key);
      return _null;
    },
    findIndexByKey$1(key) {
      return this._findChildIndex$1(key instanceof C._SaltedValueKey ? key.value : key);
    },
    build$2(context, index) {
      var child, t1, key, semanticIndex, _null = null;
      if (index < 0 || index >= 2)
        return _null;
      child = this.children[index];
      t1 = child.key;
      key = t1 != null ? new C._SaltedValueKey(t1) : _null;
      child = new B.RepaintBoundary(child, _null);
      semanticIndex = C._kDefaultSemanticIndexCallback(child, index);
      child = semanticIndex != null ? new C.IndexedSemantics(semanticIndex, child, _null) : child;
      return new B.KeyedSubtree(new C.AutomaticKeepAlive(new C._SelectionKeepAlive(child, _null), _null), key);
    },
    get$estimatedChildCount() {
      return 2;
    },
    shouldRebuild$1(oldDelegate) {
      return this.children !== oldDelegate.children;
    }
  };
  A.SliverFillViewport.prototype = {
    build$1(context) {
      var t1 = this.viewportFraction,
        t2 = B.clampDouble(1 - t1, 0, 1);
      return new A._SliverFractionalPadding(t2 / 2, new A._SliverFillViewportRenderObjectWidget(t1, this.delegate, null), null);
    }
  };
  A._SliverFillViewportRenderObjectWidget.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderSliverFillViewport(this.viewportFraction, type$.SliverMultiBoxAdaptorElement._as(context), B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.RenderBox), 0, null, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$viewportFraction(this.viewportFraction);
    }
  };
  A._SliverFractionalPadding.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderSliverFractionalPadding(this.viewportFraction, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      renderObject.set$viewportFraction(this.viewportFraction);
    }
  };
  A._RenderSliverFractionalPadding.prototype = {
    set$viewportFraction(newValue) {
      var _this = this;
      if (_this._sliver_fill$_viewportFraction === newValue)
        return;
      _this._sliver_fill$_viewportFraction = newValue;
      _this._sliver_fill$_resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    get$resolvedPadding() {
      return this._sliver_fill$_resolvedPadding;
    },
    _sliver_fill$_resolve$0() {
      var t1, paddingValue, _this = this;
      if (_this._sliver_fill$_resolvedPadding != null && J.$eq$(_this._lastResolvedConstraints, type$.SliverConstraints._as(B.RenderObject.prototype.get$constraints.call(_this))))
        return;
      t1 = type$.SliverConstraints;
      paddingValue = t1._as(B.RenderObject.prototype.get$constraints.call(_this)).viewportMainAxisExtent * _this._sliver_fill$_viewportFraction;
      _this._lastResolvedConstraints = t1._as(B.RenderObject.prototype.get$constraints.call(_this));
      switch (B.axisDirectionToAxis(t1._as(B.RenderObject.prototype.get$constraints.call(_this)).axisDirection).index) {
        case 0:
          _this._sliver_fill$_resolvedPadding = new B.EdgeInsets(paddingValue, 0, paddingValue, 0);
          break;
        case 1:
          _this._sliver_fill$_resolvedPadding = new B.EdgeInsets(0, paddingValue, 0, paddingValue);
          break;
      }
      return;
    },
    performLayout$0() {
      this._sliver_fill$_resolve$0();
      this.super$RenderSliverEdgeInsetsPadding$performLayout();
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["Viewport(BuildContext,ViewportOffset)"]);
  A._PageViewState_build_closure.prototype = {
    call$1(notification) {
      if (notification.ViewportNotificationMixin__depth === 0)
        this.$this._widget.toString;
      return false;
    },
    $signature: 30
  };
  A._PageViewState_build_closure0.prototype = {
    call$2(context, position) {
      var t1 = this.$this._widget;
      t1.controller.toString;
      return C.Viewport$(0, this.axisDirection, 0, G.CacheExtentStyle_1, null, D.Clip_1, position, B._setArrayType([new A.SliverFillViewport(1, true, t1.childrenDelegate, null)], type$.JSArray_Widget));
    },
    $signature: typesOffset + 0
  };
  (function inheritance() {
    var _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.RenderSliverFillViewport, C.RenderSliverFixedExtentBoxAdaptor);
    _inherit(A.PageController, B.ScrollController);
    _inherit(A.PageMetrics, B.FixedScrollMetrics);
    _inherit(A._PagePosition, B.ScrollPositionWithSingleContext);
    _inheritMany(B.ScrollPhysics, [A._ForceImplicitScrollPhysics, A.PageScrollPhysics]);
    _inherit(A.PageView, B.StatefulWidget);
    _inherit(A._PageViewState, B.State);
    _inherit(A._PageViewState_build_closure, B.Closure);
    _inherit(A._PageViewState_build_closure0, B.Closure2Args);
    _inherit(A.SliverChildListDelegate, C.SliverChildDelegate);
    _inherit(A.SliverFillViewport, B.StatelessWidget);
    _inherit(A._SliverFillViewportRenderObjectWidget, C.SliverMultiBoxAdaptorWidget);
    _inherit(A._SliverFractionalPadding, B.SingleChildRenderObjectWidget);
    _inherit(A._RenderSliverFractionalPadding, C.RenderSliverEdgeInsetsPadding);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"RenderSliverFillViewport":{"RenderSliverMultiBoxAdaptor":[],"RenderSliver":[],"ContainerRenderObjectMixin":["RenderBox","SliverMultiBoxAdaptorParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"SliverMultiBoxAdaptorParentData","ContainerRenderObjectMixin.0":"RenderBox"},"PageView":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"PageController":{"Listenable":[]},"PageMetrics":{"ScrollMetrics":[]},"_PagePosition":{"ScrollPosition":[],"ViewportOffset":[],"Listenable":[],"ScrollMetrics":[]},"_PageViewState":{"State":["PageView"]},"SliverFillViewport":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SliverFillViewportRenderObjectWidget":{"SliverMultiBoxAdaptorWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SliverFractionalPadding":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderSliverFractionalPadding":{"RenderSliver":[],"RenderObjectWithChildMixin":["RenderSliver"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      ContainerLayer: findType("ContainerLayer0"),
      Directionality: findType("Directionality"),
      JSArray_ScrollPosition: findType("JSArray<ScrollPosition>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      NotificationListener_ScrollNotification: findType("NotificationListener<ScrollNotification>"),
      RenderBox: findType("RenderBox"),
      SliverConstraints: findType("SliverConstraints"),
      SliverMultiBoxAdaptorElement: findType("SliverMultiBoxAdaptorElement"),
      ValueNotifier_bool: findType("ValueNotifier<bool>"),
      _PagePosition: findType("_PagePosition"),
      int: findType("int"),
      nullable_Key: findType("Key?"),
      void: findType("~")
    };
  })();
  (function constants() {
    F.PageScrollPhysics_null = new A.PageScrollPhysics(null);
  })();
};

$__dart_deferred_initializers__["lurGepwS68LautmbSX4x1jQFhTk="] = $__dart_deferred_initializers__.current
